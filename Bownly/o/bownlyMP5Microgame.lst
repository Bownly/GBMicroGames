                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module bownlyMP5Microgame
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _bownlyMP5MicrogameMain
                                     12 	.globl _playMoveSfx
                                     13 	.globl _playHurtSfx
                                     14 	.globl _playCollisionSfx
                                     15 	.globl _playSong
                                     16 	.globl _fadein
                                     17 	.globl _getRandUint8
                                     18 	.globl _init_bkg
                                     19 	.globl _set_sprite_data
                                     20 	.globl _set_bkg_tile_xy
                                     21 	.globl _set_bkg_tiles
                                     22 	.globl _set_bkg_data
                                     23 	.globl _joypad
                                     24 ;--------------------------------------------------------
                                     25 ; special function registers
                                     26 ;--------------------------------------------------------
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _DATA
      000000                         31 _buttonHoldTick:
      000000                         32 	.ds 1
      000001                         33 _screenShakeTick:
      000001                         34 	.ds 1
      000002                         35 _flipAnimTick:
      000002                         36 	.ds 1
      000003                         37 _flipDuration:
      000003                         38 	.ds 1
      000004                         39 _prestonXIndex:
      000004                         40 	.ds 1
      000005                         41 _prestonYIndex:
      000005                         42 	.ds 1
      000006                         43 _prestonIsHorz:
      000006                         44 	.ds 1
      000007                         45 _prestonHP:
      000007                         46 	.ds 1
      000008                         47 _gridPanels:
      000008                         48 	.ds 150
      00009E                         49 _remaining5s:
      00009E                         50 	.ds 1
      00009F                         51 _didWinFlip:
      00009F                         52 	.ds 1
                                     53 ;--------------------------------------------------------
                                     54 ; ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area _INITIALIZED
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area _DABS (ABS)
                                     61 ;--------------------------------------------------------
                                     62 ; global & static initialisations
                                     63 ;--------------------------------------------------------
                                     64 	.area _HOME
                                     65 	.area _GSINIT
                                     66 	.area _GSFINAL
                                     67 	.area _GSINIT
                                     68 ;--------------------------------------------------------
                                     69 ; Home
                                     70 ;--------------------------------------------------------
                                     71 	.area _HOME
                                     72 	.area _HOME
                                     73 ;--------------------------------------------------------
                                     74 ; code
                                     75 ;--------------------------------------------------------
                                     76 	.area _CODE_2
                                     77 ;Bownly/states/bownlyMP5Microgame.c:85: void bownlyMP5MicrogameMain()
                                     78 ;	---------------------------------
                                     79 ; Function bownlyMP5MicrogameMain
                                     80 ; ---------------------------------
      000000                         81 _bownlyMP5MicrogameMain::
                                     82 ;Bownly/states/bownlyMP5Microgame.c:87: curJoypad = joypad();
      000000 CDr00r00                83 	call	_joypad
      000003 21r00r00                84 	ld	hl, #_curJoypad
      000006 73                      85 	ld	(hl), e
                                     86 ;Bownly/states/bownlyMP5Microgame.c:89: switch (substate)
      000007 FAr00r00                87 	ld	a, (#_substate)
      00000A B7                      88 	or	a, a
      00000B 28 08                   89 	jr	Z, 00101$
      00000D FAr00r00                90 	ld	a, (#_substate)
      000010 3D                      91 	dec	a
      000011 28 07                   92 	jr	Z, 00102$
      000013 18 0A                   93 	jr	00103$
                                     94 ;Bownly/states/bownlyMP5Microgame.c:91: case SUB_INIT:
      000015                         95 00101$:
                                     96 ;Bownly/states/bownlyMP5Microgame.c:92: phaseMagipanels5Init();
      000015 CDr30r00                97 	call	_phaseMagipanels5Init
                                     98 ;Bownly/states/bownlyMP5Microgame.c:93: break;
      000018 18 0F                   99 	jr	00104$
                                    100 ;Bownly/states/bownlyMP5Microgame.c:94: case SUB_LOOP:
      00001A                        101 00102$:
                                    102 ;Bownly/states/bownlyMP5Microgame.c:95: phaseMagipanels5Loop();
      00001A CDr1Ar01               103 	call	_phaseMagipanels5Loop
                                    104 ;Bownly/states/bownlyMP5Microgame.c:96: break;
      00001D 18 0A                  105 	jr	00104$
                                    106 ;Bownly/states/bownlyMP5Microgame.c:97: default:  // Abort to title in the event of unexpected state
      00001F                        107 00103$:
                                    108 ;Bownly/states/bownlyMP5Microgame.c:98: gamestate = STATE_TITLE;
      00001F 21r00r00               109 	ld	hl, #_gamestate
      000022 36 00                  110 	ld	(hl), #0x00
                                    111 ;Bownly/states/bownlyMP5Microgame.c:99: substate = SUB_INIT;
      000024 21r00r00               112 	ld	hl, #_substate
      000027 36 00                  113 	ld	(hl), #0x00
                                    114 ;Bownly/states/bownlyMP5Microgame.c:101: }
      000029                        115 00104$:
                                    116 ;Bownly/states/bownlyMP5Microgame.c:102: prevJoypad = curJoypad;
      000029 FAr00r00               117 	ld	a, (#_curJoypad)
      00002C EAr00r00               118 	ld	(#_prevJoypad),a
                                    119 ;Bownly/states/bownlyMP5Microgame.c:103: }
      00002F C9                     120 	ret
                                    121 ;Bownly/states/bownlyMP5Microgame.c:107: static void phaseMagipanels5Init()
                                    122 ;	---------------------------------
                                    123 ; Function phaseMagipanels5Init
                                    124 ; ---------------------------------
      000030                        125 _phaseMagipanels5Init:
                                    126 ;Bownly/states/bownlyMP5Microgame.c:110: init_bkg(0xFFU);
      000030 3E FF                  127 	ld	a, #0xff
      000032 F5                     128 	push	af
      000033 33                     129 	inc	sp
      000034 CDr00r00               130 	call	_init_bkg
      000037 33                     131 	inc	sp
                                    132 ;Bownly/states/bownlyMP5Microgame.c:111: animTick = 0U;
      000038 21r00r00               133 	ld	hl, #_animTick
      00003B 36 00                  134 	ld	(hl), #0x00
                                    135 ;Bownly/states/bownlyMP5Microgame.c:112: flipAnimTick = 0U;
      00003D 21r02r00               136 	ld	hl, #_flipAnimTick
      000040 36 00                  137 	ld	(hl), #0x00
                                    138 ;Bownly/states/bownlyMP5Microgame.c:114: buttonHoldTick = 0U;
      000042 21r00r00               139 	ld	hl, #_buttonHoldTick
      000045 36 00                  140 	ld	(hl), #0x00
                                    141 ;Bownly/states/bownlyMP5Microgame.c:115: screenShakeTick = 0U;
      000047 21r01r00               142 	ld	hl, #_screenShakeTick
      00004A 36 00                  143 	ld	(hl), #0x00
                                    144 ;Bownly/states/bownlyMP5Microgame.c:117: prestonXIndex = 0U;
      00004C 21r04r00               145 	ld	hl, #_prestonXIndex
      00004F 36 00                  146 	ld	(hl), #0x00
                                    147 ;Bownly/states/bownlyMP5Microgame.c:118: prestonYIndex = 1U;
      000051 21r05r00               148 	ld	hl, #_prestonYIndex
      000054 36 01                  149 	ld	(hl), #0x01
                                    150 ;Bownly/states/bownlyMP5Microgame.c:119: prestonIsHorz = FALSE;
      000056 21r06r00               151 	ld	hl, #_prestonIsHorz
      000059 36 00                  152 	ld	(hl), #0x00
                                    153 ;Bownly/states/bownlyMP5Microgame.c:120: prestonHP = 1U;
      00005B 21r07r00               154 	ld	hl, #_prestonHP
      00005E 36 01                  155 	ld	(hl), #0x01
                                    156 ;Bownly/states/bownlyMP5Microgame.c:122: didWinFlip = FALSE;
      000060 21r9Fr00               157 	ld	hl, #_didWinFlip
      000063 36 00                  158 	ld	(hl), #0x00
                                    159 ;Bownly/states/bownlyMP5Microgame.c:123: remaining5s = mgDifficulty + 1U;
      000065 FAr00r00               160 	ld	a, (#_mgDifficulty)
      000068 3C                     161 	inc	a
      000069 EAr9Er00               162 	ld	(#_remaining5s),a
                                    163 ;Bownly/states/bownlyMP5Microgame.c:124: flipDuration = 21U - mgDifficulty - mgDifficulty;  // Looks dumb, but it's more space efficient
      00006C 3E 15                  164 	ld	a, #0x15
      00006E 21r00r00               165 	ld	hl, #_mgDifficulty
      000071 96                     166 	sub	a, (hl)
      000072 96                     167 	sub	a, (hl)
      000073 EAr03r00               168 	ld	(#_flipDuration),a
                                    169 ;Bownly/states/bownlyMP5Microgame.c:126: set_bkg_data(BKGTILE_DICE, 36U, bownlyMP5DiceTiles);
      000076 11r00r00               170 	ld	de, #_bownlyMP5DiceTiles
      000079 D5                     171 	push	de
      00007A 21 50 24               172 	ld	hl, #0x2450
      00007D E5                     173 	push	hl
      00007E CDr00r00               174 	call	_set_bkg_data
      000081 E8 04                  175 	add	sp, #4
                                    176 ;Bownly/states/bownlyMP5Microgame.c:127: set_bkg_data(BKGTILE_STAGE, 14U, bownlyMP5StageTiles);
      000083 11r00r00               177 	ld	de, #_bownlyMP5StageTiles
      000086 D5                     178 	push	de
      000087 21 40 0E               179 	ld	hl, #0xe40
      00008A E5                     180 	push	hl
      00008B CDr00r00               181 	call	_set_bkg_data
      00008E E8 04                  182 	add	sp, #4
                                    183 ;Bownly/states/bownlyMP5Microgame.c:128: set_bkg_tiles(0U, 0U, 20U, 2U, bownlyMP5StageTopMap);
      000090 11r00r00               184 	ld	de, #_bownlyMP5StageTopMap
      000093 D5                     185 	push	de
      000094 21 14 02               186 	ld	hl, #0x214
      000097 E5                     187 	push	hl
      000098 AF                     188 	xor	a, a
      000099 0F                     189 	rrca
      00009A F5                     190 	push	af
      00009B CDr00r00               191 	call	_set_bkg_tiles
      00009E E8 06                  192 	add	sp, #6
                                    193 ;Bownly/states/bownlyMP5Microgame.c:129: set_bkg_tiles(0U, 2U, 2U, 14U, bownlyMP5StageColMap);
      0000A0 01r00r00               194 	ld	bc, #_bownlyMP5StageColMap+0
      0000A3 C5                     195 	push	bc
      0000A4 21 02 0E               196 	ld	hl, #0xe02
      0000A7 E5                     197 	push	hl
      0000A8 21 00 02               198 	ld	hl, #0x200
      0000AB E5                     199 	push	hl
      0000AC CDr00r00               200 	call	_set_bkg_tiles
      0000AF E8 06                  201 	add	sp, #6
                                    202 ;Bownly/states/bownlyMP5Microgame.c:130: set_bkg_tiles(18U, 2U, 2U, 14U, bownlyMP5StageColMap);
      0000B1 C5                     203 	push	bc
      0000B2 21 02 0E               204 	ld	hl, #0xe02
      0000B5 E5                     205 	push	hl
      0000B6 21 12 02               206 	ld	hl, #0x212
      0000B9 E5                     207 	push	hl
      0000BA CDr00r00               208 	call	_set_bkg_tiles
      0000BD E8 06                  209 	add	sp, #6
                                    210 ;Bownly/states/bownlyMP5Microgame.c:131: for (i = 0U; i != 20U; ++i)
      0000BF 21r00r00               211 	ld	hl, #_i
      0000C2 36 00                  212 	ld	(hl), #0x00
      0000C4                        213 00102$:
                                    214 ;Bownly/states/bownlyMP5Microgame.c:133: set_bkg_tile_xy(i, 16U, 0x4C);
      0000C4 21 10 4C               215 	ld	hl, #0x4c10
      0000C7 E5                     216 	push	hl
      0000C8 FAr00r00               217 	ld	a, (#_i)
      0000CB F5                     218 	push	af
      0000CC 33                     219 	inc	sp
      0000CD CDr00r00               220 	call	_set_bkg_tile_xy
      0000D0 E8 03                  221 	add	sp, #3
                                    222 ;Bownly/states/bownlyMP5Microgame.c:134: set_bkg_tile_xy(i, 17U, 0x4D);
      0000D2 21 11 4D               223 	ld	hl, #0x4d11
      0000D5 E5                     224 	push	hl
      0000D6 FAr00r00               225 	ld	a, (#_i)
      0000D9 F5                     226 	push	af
      0000DA 33                     227 	inc	sp
      0000DB CDr00r00               228 	call	_set_bkg_tile_xy
      0000DE E8 03                  229 	add	sp, #3
                                    230 ;Bownly/states/bownlyMP5Microgame.c:131: for (i = 0U; i != 20U; ++i)
      0000E0 21r00r00               231 	ld	hl, #_i
      0000E3 34                     232 	inc	(hl)
      0000E4 7E                     233 	ld	a, (hl)
      0000E5 D6 14                  234 	sub	a, #0x14
      0000E7 20 DB                  235 	jr	NZ, 00102$
                                    236 ;Bownly/states/bownlyMP5Microgame.c:137: set_sprite_data(SPRTILE_HEARTS, 2U, bownlyMP5HeartTiles);
      0000E9 11r00r00               237 	ld	de, #_bownlyMP5HeartTiles
      0000EC D5                     238 	push	de
      0000ED 21 40 02               239 	ld	hl, #0x240
      0000F0 E5                     240 	push	hl
      0000F1 CDr00r00               241 	call	_set_sprite_data
      0000F4 E8 04                  242 	add	sp, #4
                                    243 ;Bownly/states/bownlyMP5Microgame.c:138: setupHearts();
      0000F6 CDr8Dr06               244 	call	_setupHearts
                                    245 ;Bownly/states/bownlyMP5Microgame.c:139: set_sprite_data(SPRTILE_PRESTON, bownlySprPreston_TILE_COUNT, bownlySprPreston_tiles);
      0000F9 11r00r00               246 	ld	de, #_bownlySprPreston_tiles
      0000FC D5                     247 	push	de
      0000FD 21 00 34               248 	ld	hl, #0x3400
      000100 E5                     249 	push	hl
      000101 CDr00r00               250 	call	_set_sprite_data
      000104 E8 04                  251 	add	sp, #4
                                    252 ;Bownly/states/bownlyMP5Microgame.c:141: initGrid();
      000106 CDrF1r02               253 	call	_initGrid
                                    254 ;Bownly/states/bownlyMP5Microgame.c:143: playSong(&bownlyTheWhiteSong);
      000109 11r00r00               255 	ld	de, #_bownlyTheWhiteSong
      00010C D5                     256 	push	de
      00010D CDr00r00               257 	call	_playSong
      000110 E1                     258 	pop	hl
                                    259 ;Bownly/states/bownlyMP5Microgame.c:145: fadein();
      000111 CDr00r00               260 	call	_fadein
                                    261 ;Bownly/states/bownlyMP5Microgame.c:146: substate = SUB_LOOP;
      000114 21r00r00               262 	ld	hl, #_substate
      000117 36 01                  263 	ld	(hl), #0x01
                                    264 ;Bownly/states/bownlyMP5Microgame.c:148: }
      000119 C9                     265 	ret
                                    266 ;Bownly/states/bownlyMP5Microgame.c:150: static void phaseMagipanels5Loop()
                                    267 ;	---------------------------------
                                    268 ; Function phaseMagipanels5Loop
                                    269 ; ---------------------------------
      00011A                        270 _phaseMagipanels5Loop:
                                    271 ;Bownly/states/bownlyMP5Microgame.c:152: ++animTick;
      00011A 21r00r00               272 	ld	hl, #_animTick
      00011D 34                     273 	inc	(hl)
                                    274 ;Bownly/states/bownlyMP5Microgame.c:153: if (flipAnimTick != 0U && flipAnimTick != flipDuration)
      00011E 21r02r00               275 	ld	hl, #_flipAnimTick
      000121 7E                     276 	ld	a, (hl)
      000122 B7                     277 	or	a, a
      000123 28 0D                  278 	jr	Z, 00102$
      000125 7E                     279 	ld	a, (hl)
      000126 21r03r00               280 	ld	hl, #_flipDuration
      000129 96                     281 	sub	a, (hl)
      00012A 28 06                  282 	jr	Z, 00102$
                                    283 ;Bownly/states/bownlyMP5Microgame.c:154: ++flipAnimTick;
      00012C 21r02r00               284 	ld	hl, #_flipAnimTick
      00012F 34                     285 	inc	(hl)
      000130 18 05                  286 	jr	00103$
      000132                        287 00102$:
                                    288 ;Bownly/states/bownlyMP5Microgame.c:156: flipAnimTick = 0U;
      000132 21r02r00               289 	ld	hl, #_flipAnimTick
      000135 36 00                  290 	ld	(hl), #0x00
      000137                        291 00103$:
                                    292 ;Bownly/states/bownlyMP5Microgame.c:158: inputsMP5();
      000137 CDr4Br01               293 	call	_inputsMP5
                                    294 ;Bownly/states/bownlyMP5Microgame.c:160: animatePreston();
      00013A CDr22r05               295 	call	_animatePreston
                                    296 ;Bownly/states/bownlyMP5Microgame.c:161: if (flipAnimTick != 0U)
      00013D 21r02r00               297 	ld	hl, #_flipAnimTick
      000140 7E                     298 	ld	a, (hl)
      000141 B7                     299 	or	a, a
      000142 CArD6r06               300 	jp	Z,_tryShakeScreen
                                    301 ;Bownly/states/bownlyMP5Microgame.c:162: updateFlippingPanels();
      000145 CDr2Cr07               302 	call	_updateFlippingPanels
                                    303 ;Bownly/states/bownlyMP5Microgame.c:164: tryShakeScreen();
                                    304 ;Bownly/states/bownlyMP5Microgame.c:166: }
      000148 C3rD6r06               305 	jp	_tryShakeScreen
                                    306 ;Bownly/states/bownlyMP5Microgame.c:170: static void inputsMP5()
                                    307 ;	---------------------------------
                                    308 ; Function inputsMP5
                                    309 ; ---------------------------------
      00014B                        310 _inputsMP5:
      00014B 3B                     311 	dec	sp
                                    312 ;Bownly/states/bownlyMP5Microgame.c:172: if (!curJoypad & (J_UP | J_DOWN | J_LEFT | J_RIGHT))
      00014C FAr00r00               313 	ld	a, (#_curJoypad)
      00014F B7                     314 	or	a, a
      000150 20 05                  315 	jr	NZ, 00102$
                                    316 ;Bownly/states/bownlyMP5Microgame.c:174: buttonHoldTick = 0U;
      000152 21r00r00               317 	ld	hl, #_buttonHoldTick
      000155 36 00                  318 	ld	(hl), #0x00
      000157                        319 00102$:
                                    320 ;Bownly/states/bownlyMP5Microgame.c:177: if (screenShakeTick == 0U && mgStatus != LOST)
      000157 FAr01r00               321 	ld	a, (#_screenShakeTick)
      00015A B7                     322 	or	a, a
      00015B C2rEFr02               323 	jp	NZ, 00152$
      00015E FAr00r00               324 	ld	a, (#_mgStatus)
      000161 D6 03                  325 	sub	a, #0x03
      000163 CArEFr02               326 	jp	Z,00152$
                                    327 ;Bownly/states/bownlyMP5Microgame.c:179: if(curJoypad & J_LEFT)
      000166 FAr00r00               328 	ld	a, (#_curJoypad)
      000169 F8 00                  329 	ldhl	sp,	#0
      00016B 77                     330 	ld	(hl), a
                                    331 ;Bownly/states/bownlyMP5Microgame.c:181: ++buttonHoldTick;
      00016C FAr00r00               332 	ld	a, (#_buttonHoldTick)
      00016F 3C                     333 	inc	a
                                    334 ;Bownly/states/bownlyMP5Microgame.c:182: if (!(prevJoypad & J_LEFT) || (buttonHoldTick % 16U == 0U))
      000170 21r00r00               335 	ld	hl, #_prevJoypad
      000173 6E                     336 	ld	l, (hl)
                                    337 ;	spillPairReg hl
                                    338 ;	spillPairReg hl
                                    339 ;Bownly/states/bownlyMP5Microgame.c:179: if(curJoypad & J_LEFT)
      000174 E5                     340 	push	hl
      000175 F8 02                  341 	ldhl	sp,	#2
      000177 CB 4E                  342 	bit	1, (hl)
      000179 E1                     343 	pop	hl
      00017A 28 35                  344 	jr	Z, 00132$
                                    345 ;Bownly/states/bownlyMP5Microgame.c:181: ++buttonHoldTick;
      00017C EAr00r00               346 	ld	(_buttonHoldTick), a
                                    347 ;Bownly/states/bownlyMP5Microgame.c:182: if (!(prevJoypad & J_LEFT) || (buttonHoldTick % 16U == 0U))
      00017F CB 4D                  348 	bit	1, l
      000181 28 08                  349 	jr	Z, 00107$
      000183 FAr00r00               350 	ld	a, (#_buttonHoldTick)
      000186 E6 0F                  351 	and	a, #0x0f
      000188 C2r5Fr02               352 	jp	NZ,00133$
      00018B                        353 00107$:
                                    354 ;Bownly/states/bownlyMP5Microgame.c:184: prestonIsHorz = TRUE;
      00018B 21r06r00               355 	ld	hl, #_prestonIsHorz
      00018E 36 01                  356 	ld	(hl), #0x01
                                    357 ;Bownly/states/bownlyMP5Microgame.c:185: if (prestonXIndex == 0U || prestonXIndex == 1U)
      000190 21r04r00               358 	ld	hl, #_prestonXIndex
      000193 7E                     359 	ld	a, (hl)
      000194 B7                     360 	or	a, a
      000195 28 04                  361 	jr	Z, 00103$
      000197 7E                     362 	ld	a, (hl)
      000198 3D                     363 	dec	a
      000199 20 07                  364 	jr	NZ, 00104$
      00019B                        365 00103$:
                                    366 ;Bownly/states/bownlyMP5Microgame.c:186: prestonXIndex = 5U;
      00019B 21r04r00               367 	ld	hl, #_prestonXIndex
      00019E 36 05                  368 	ld	(hl), #0x05
      0001A0 18 04                  369 	jr	00105$
      0001A2                        370 00104$:
                                    371 ;Bownly/states/bownlyMP5Microgame.c:188: --prestonXIndex;
      0001A2 21r04r00               372 	ld	hl, #_prestonXIndex
      0001A5 35                     373 	dec	(hl)
      0001A6                        374 00105$:
                                    375 ;Bownly/states/bownlyMP5Microgame.c:189: prestonYIndex = 0U;
      0001A6 21r05r00               376 	ld	hl, #_prestonYIndex
      0001A9 36 00                  377 	ld	(hl), #0x00
                                    378 ;Bownly/states/bownlyMP5Microgame.c:190: playMoveSfx();
      0001AB CDr00r00               379 	call	_playMoveSfx
      0001AE C3r5Fr02               380 	jp	00133$
      0001B1                        381 00132$:
                                    382 ;Bownly/states/bownlyMP5Microgame.c:193: else if(curJoypad & J_RIGHT)
      0001B1 E5                     383 	push	hl
      0001B2 F8 02                  384 	ldhl	sp,	#2
      0001B4 CB 46                  385 	bit	0, (hl)
      0001B6 E1                     386 	pop	hl
      0001B7 28 33                  387 	jr	Z, 00129$
                                    388 ;Bownly/states/bownlyMP5Microgame.c:195: ++buttonHoldTick;
      0001B9 EAr00r00               389 	ld	(_buttonHoldTick), a
                                    390 ;Bownly/states/bownlyMP5Microgame.c:196: if (!(prevJoypad & J_RIGHT) || (buttonHoldTick % 16U == 0U))
      0001BC CB 45                  391 	bit	0, l
      0001BE 28 08                  392 	jr	Z, 00110$
      0001C0 FAr00r00               393 	ld	a, (#_buttonHoldTick)
      0001C3 E6 0F                  394 	and	a, #0x0f
      0001C5 C2r5Fr02               395 	jp	NZ,00133$
      0001C8                        396 00110$:
                                    397 ;Bownly/states/bownlyMP5Microgame.c:198: prestonIsHorz = TRUE;
      0001C8 21r06r00               398 	ld	hl, #_prestonIsHorz
      0001CB 36 01                  399 	ld	(hl), #0x01
                                    400 ;Bownly/states/bownlyMP5Microgame.c:199: prestonXIndex = (prestonXIndex) % 5U + 1U;
      0001CD 21r04r00               401 	ld	hl, #_prestonXIndex
      0001D0 4E                     402 	ld	c, (hl)
      0001D1 06 00                  403 	ld	b, #0x00
      0001D3 11 05 00               404 	ld	de, #0x0005
      0001D6 D5                     405 	push	de
      0001D7 C5                     406 	push	bc
      0001D8 CDr00r00               407 	call	__moduint
      0001DB E8 04                  408 	add	sp, #4
      0001DD 7B                     409 	ld	a, e
      0001DE 3C                     410 	inc	a
      0001DF EAr04r00               411 	ld	(#_prestonXIndex),a
                                    412 ;Bownly/states/bownlyMP5Microgame.c:200: prestonYIndex = 0U;
      0001E2 21r05r00               413 	ld	hl, #_prestonYIndex
      0001E5 36 00                  414 	ld	(hl), #0x00
                                    415 ;Bownly/states/bownlyMP5Microgame.c:201: playMoveSfx();
      0001E7 CDr00r00               416 	call	_playMoveSfx
      0001EA 18 73                  417 	jr	00133$
      0001EC                        418 00129$:
                                    419 ;Bownly/states/bownlyMP5Microgame.c:204: else if(curJoypad & J_UP)
      0001EC E5                     420 	push	hl
      0001ED F8 02                  421 	ldhl	sp,	#2
      0001EF CB 56                  422 	bit	2, (hl)
      0001F1 E1                     423 	pop	hl
      0001F2 28 33                  424 	jr	Z, 00126$
                                    425 ;Bownly/states/bownlyMP5Microgame.c:206: ++buttonHoldTick;
      0001F4 EAr00r00               426 	ld	(_buttonHoldTick), a
                                    427 ;Bownly/states/bownlyMP5Microgame.c:207: if (!(prevJoypad & J_UP) || (buttonHoldTick % 16U == 0U))
      0001F7 CB 55                  428 	bit	2, l
      0001F9 28 07                  429 	jr	Z, 00117$
      0001FB FAr00r00               430 	ld	a, (#_buttonHoldTick)
      0001FE E6 0F                  431 	and	a, #0x0f
      000200 20 5D                  432 	jr	NZ, 00133$
      000202                        433 00117$:
                                    434 ;Bownly/states/bownlyMP5Microgame.c:209: prestonIsHorz = FALSE;
      000202 21r06r00               435 	ld	hl, #_prestonIsHorz
      000205 36 00                  436 	ld	(hl), #0x00
                                    437 ;Bownly/states/bownlyMP5Microgame.c:210: if (prestonYIndex == 0U || prestonYIndex == 1U)
      000207 21r05r00               438 	ld	hl, #_prestonYIndex
      00020A 7E                     439 	ld	a, (hl)
      00020B B7                     440 	or	a, a
      00020C 28 04                  441 	jr	Z, 00113$
      00020E 7E                     442 	ld	a, (hl)
      00020F 3D                     443 	dec	a
      000210 20 07                  444 	jr	NZ, 00114$
      000212                        445 00113$:
                                    446 ;Bownly/states/bownlyMP5Microgame.c:211: prestonYIndex = 5U;
      000212 21r05r00               447 	ld	hl, #_prestonYIndex
      000215 36 05                  448 	ld	(hl), #0x05
      000217 18 04                  449 	jr	00115$
      000219                        450 00114$:
                                    451 ;Bownly/states/bownlyMP5Microgame.c:213: --prestonYIndex;
      000219 21r05r00               452 	ld	hl, #_prestonYIndex
      00021C 35                     453 	dec	(hl)
      00021D                        454 00115$:
                                    455 ;Bownly/states/bownlyMP5Microgame.c:214: prestonXIndex = 0U;
      00021D 21r04r00               456 	ld	hl, #_prestonXIndex
      000220 36 00                  457 	ld	(hl), #0x00
                                    458 ;Bownly/states/bownlyMP5Microgame.c:215: playMoveSfx();
      000222 CDr00r00               459 	call	_playMoveSfx
      000225 18 38                  460 	jr	00133$
      000227                        461 00126$:
                                    462 ;Bownly/states/bownlyMP5Microgame.c:218: else if(curJoypad & J_DOWN)
      000227 E5                     463 	push	hl
      000228 F8 02                  464 	ldhl	sp,	#2
      00022A CB 5E                  465 	bit	3, (hl)
      00022C E1                     466 	pop	hl
      00022D 28 30                  467 	jr	Z, 00133$
                                    468 ;Bownly/states/bownlyMP5Microgame.c:220: ++buttonHoldTick;
      00022F EAr00r00               469 	ld	(_buttonHoldTick), a
                                    470 ;Bownly/states/bownlyMP5Microgame.c:221: if (!(prevJoypad & J_DOWN) || (buttonHoldTick % 16U == 0U))
      000232 CB 5D                  471 	bit	3, l
      000234 28 07                  472 	jr	Z, 00120$
      000236 FAr00r00               473 	ld	a, (#_buttonHoldTick)
      000239 E6 0F                  474 	and	a, #0x0f
      00023B 20 22                  475 	jr	NZ, 00133$
      00023D                        476 00120$:
                                    477 ;Bownly/states/bownlyMP5Microgame.c:223: prestonIsHorz = FALSE;
      00023D 21r06r00               478 	ld	hl, #_prestonIsHorz
      000240 36 00                  479 	ld	(hl), #0x00
                                    480 ;Bownly/states/bownlyMP5Microgame.c:224: prestonYIndex = (prestonYIndex) % 5U + 1U;
      000242 21r05r00               481 	ld	hl, #_prestonYIndex
      000245 4E                     482 	ld	c, (hl)
      000246 06 00                  483 	ld	b, #0x00
      000248 11 05 00               484 	ld	de, #0x0005
      00024B D5                     485 	push	de
      00024C C5                     486 	push	bc
      00024D CDr00r00               487 	call	__moduint
      000250 E8 04                  488 	add	sp, #4
      000252 7B                     489 	ld	a, e
      000253 3C                     490 	inc	a
      000254 EAr05r00               491 	ld	(#_prestonYIndex),a
                                    492 ;Bownly/states/bownlyMP5Microgame.c:225: prestonXIndex = 0U;
      000257 21r04r00               493 	ld	hl, #_prestonXIndex
      00025A 36 00                  494 	ld	(hl), #0x00
                                    495 ;Bownly/states/bownlyMP5Microgame.c:226: playMoveSfx();
      00025C CDr00r00               496 	call	_playMoveSfx
      00025F                        497 00133$:
                                    498 ;Bownly/states/bownlyMP5Microgame.c:231: if (mgStatus == PLAYING)
      00025F FAr00r00               499 	ld	a, (#_mgStatus)
      000262 3D                     500 	dec	a
      000263 C2rEFr02               501 	jp	NZ,00152$
                                    502 ;Bownly/states/bownlyMP5Microgame.c:233: if (curJoypad & J_A && !(prevJoypad & J_A) && flipAnimTick == 0U)
      000266 FAr00r00               503 	ld	a, (#_curJoypad)
      000269 CB 67                  504 	bit	4, a
      00026B CArEFr02               505 	jp	Z,00152$
      00026E FAr00r00               506 	ld	a, (#_prevJoypad)
      000271 CB 67                  507 	bit	4, a
      000273 20 7A                  508 	jr	NZ, 00152$
      000275 FAr02r00               509 	ld	a, (#_flipAnimTick)
      000278 B7                     510 	or	a, a
      000279 20 74                  511 	jr	NZ, 00152$
                                    512 ;Bownly/states/bownlyMP5Microgame.c:235: playCollisionSfx();
      00027B CDr00r00               513 	call	_playCollisionSfx
                                    514 ;Bownly/states/bownlyMP5Microgame.c:236: flipAnimTick = 1U;
      00027E 21r02r00               515 	ld	hl, #_flipAnimTick
      000281 36 01                  516 	ld	(hl), #0x01
                                    517 ;Bownly/states/bownlyMP5Microgame.c:239: if (prestonIsHorz == TRUE)
      000283 FAr06r00               518 	ld	a, (#_prestonIsHorz)
      000286 3D                     519 	dec	a
      000287 20 36                  520 	jr	NZ, 00137$
                                    521 ;Bownly/states/bownlyMP5Microgame.c:241: j = (prestonXIndex - 1U) * 5U;
      000289 FAr04r00               522 	ld	a, (#_prestonXIndex)
      00028C 3D                     523 	dec	a
      00028D 4F                     524 	ld	c, a
      00028E 87                     525 	add	a, a
      00028F 87                     526 	add	a, a
      000290 81                     527 	add	a, c
      000291 EAr00r00               528 	ld	(#_j),a
                                    529 ;Bownly/states/bownlyMP5Microgame.c:242: for (i = 0U; i != 5U; ++i)
      000294 21r00r00               530 	ld	hl, #_i
      000297 36 00                  531 	ld	(hl), #0x00
      000299                        532 00148$:
                                    533 ;Bownly/states/bownlyMP5Microgame.c:243: incrementPanel(&gridPanels[j+i]);
      000299 21r00r00               534 	ld	hl, #_j
      00029C 4E                     535 	ld	c, (hl)
      00029D 06 00                  536 	ld	b, #0x00
      00029F 21r00r00               537 	ld	hl, #_i
      0002A2 6E                     538 	ld	l, (hl)
                                    539 ;	spillPairReg hl
                                    540 ;	spillPairReg hl
      0002A3 26 00                  541 	ld	h, #0x00
                                    542 ;	spillPairReg hl
                                    543 ;	spillPairReg hl
      0002A5 09                     544 	add	hl, bc
      0002A6 4D                     545 	ld	c, l
      0002A7 44                     546 	ld	b, h
      0002A8 29                     547 	add	hl, hl
      0002A9 09                     548 	add	hl, bc
      0002AA 29                     549 	add	hl, hl
      0002AB 11r08r00               550 	ld	de, #_gridPanels
      0002AE 19                     551 	add	hl, de
      0002AF E5                     552 	push	hl
      0002B0 CDr66r04               553 	call	_incrementPanel
      0002B3 E1                     554 	pop	hl
                                    555 ;Bownly/states/bownlyMP5Microgame.c:242: for (i = 0U; i != 5U; ++i)
      0002B4 21r00r00               556 	ld	hl, #_i
      0002B7 34                     557 	inc	(hl)
      0002B8 7E                     558 	ld	a, (hl)
      0002B9 D6 05                  559 	sub	a, #0x05
      0002BB 28 32                  560 	jr	Z, 00152$
      0002BD 18 DA                  561 	jr	00148$
      0002BF                        562 00137$:
                                    563 ;Bownly/states/bownlyMP5Microgame.c:247: j = (prestonYIndex - 1U);
      0002BF FAr05r00               564 	ld	a, (#_prestonYIndex)
      0002C2 3D                     565 	dec	a
      0002C3 EAr00r00               566 	ld	(#_j),a
                                    567 ;Bownly/states/bownlyMP5Microgame.c:248: for (i = 0U; i != 5U; ++i)
      0002C6 21r00r00               568 	ld	hl, #_i
      0002C9 36 00                  569 	ld	(hl), #0x00
      0002CB                        570 00150$:
                                    571 ;Bownly/states/bownlyMP5Microgame.c:250: incrementPanel(&gridPanels[j]);
      0002CB 21r00r00               572 	ld	hl, #_j
      0002CE 4E                     573 	ld	c, (hl)
      0002CF 06 00                  574 	ld	b, #0x00
      0002D1 69                     575 	ld	l, c
      0002D2 60                     576 	ld	h, b
      0002D3 29                     577 	add	hl, hl
      0002D4 09                     578 	add	hl, bc
      0002D5 29                     579 	add	hl, hl
      0002D6 01r08r00               580 	ld	bc,#_gridPanels
      0002D9 09                     581 	add	hl,bc
      0002DA E5                     582 	push	hl
      0002DB CDr66r04               583 	call	_incrementPanel
      0002DE E1                     584 	pop	hl
                                    585 ;Bownly/states/bownlyMP5Microgame.c:251: j += 5U;
      0002DF 21r00r00               586 	ld	hl, #_j
      0002E2 7E                     587 	ld	a, (hl)
      0002E3 C6 05                  588 	add	a, #0x05
      0002E5 77                     589 	ld	(hl), a
                                    590 ;Bownly/states/bownlyMP5Microgame.c:248: for (i = 0U; i != 5U; ++i)
      0002E6 21r00r00               591 	ld	hl, #_i
      0002E9 34                     592 	inc	(hl)
      0002EA 7E                     593 	ld	a, (hl)
      0002EB D6 05                  594 	sub	a, #0x05
      0002ED 20 DC                  595 	jr	NZ, 00150$
      0002EF                        596 00152$:
                                    597 ;Bownly/states/bownlyMP5Microgame.c:257: }
      0002EF 33                     598 	inc	sp
      0002F0 C9                     599 	ret
                                    600 ;Bownly/states/bownlyMP5Microgame.c:261: static void initGrid()
                                    601 ;	---------------------------------
                                    602 ; Function initGrid
                                    603 ; ---------------------------------
      0002F1                        604 _initGrid:
                                    605 ;Bownly/states/bownlyMP5Microgame.c:263: for (i = 0U; i != 5U; ++i)
      0002F1 21r00r00               606 	ld	hl, #_i
      0002F4 36 00                  607 	ld	(hl), #0x00
      0002F6                        608 00123$:
                                    609 ;Bownly/states/bownlyMP5Microgame.c:265: for (j = 0U; j != 5U; ++j)
      0002F6 21r00r00               610 	ld	hl, #_j
      0002F9 36 00                  611 	ld	(hl), #0x00
      0002FB                        612 00121$:
                                    613 ;Bownly/states/bownlyMP5Microgame.c:267: l = i*5U+j;
      0002FB FAr00r00               614 	ld	a, (#_i)
      0002FE 4F                     615 	ld	c, a
      0002FF 87                     616 	add	a, a
      000300 87                     617 	add	a, a
      000301 81                     618 	add	a, c
      000302 21r00r00               619 	ld	hl, #_j
      000305 86                     620 	add	a, (hl)
      000306 EAr00r00               621 	ld	(#_l),a
                                    622 ;Bownly/states/bownlyMP5Microgame.c:268: setupPanel(l, i, j, 6U);
      000309 3E 06                  623 	ld	a, #0x06
      00030B F5                     624 	push	af
      00030C 33                     625 	inc	sp
      00030D FAr00r00               626 	ld	a, (#_j)
      000310 67                     627 	ld	h, a
      000311 FAr00r00               628 	ld	a, (#_i)
      000314 6F                     629 	ld	l, a
      000315 E5                     630 	push	hl
      000316 FAr00r00               631 	ld	a, (#_l)
      000319 F5                     632 	push	af
      00031A 33                     633 	inc	sp
      00031B CDrAEr04               634 	call	_setupPanel
      00031E E8 04                  635 	add	sp, #4
                                    636 ;Bownly/states/bownlyMP5Microgame.c:265: for (j = 0U; j != 5U; ++j)
      000320 21r00r00               637 	ld	hl, #_j
      000323 34                     638 	inc	(hl)
      000324 7E                     639 	ld	a, (hl)
      000325 D6 05                  640 	sub	a, #0x05
      000327 20 D2                  641 	jr	NZ, 00121$
                                    642 ;Bownly/states/bownlyMP5Microgame.c:263: for (i = 0U; i != 5U; ++i)
      000329 21r00r00               643 	ld	hl, #_i
      00032C 34                     644 	inc	(hl)
      00032D 7E                     645 	ld	a, (hl)
      00032E D6 05                  646 	sub	a, #0x05
      000330 20 C4                  647 	jr	NZ, 00123$
                                    648 ;Bownly/states/bownlyMP5Microgame.c:273: i = getRandUint8(5U);
      000332 3E 05                  649 	ld	a, #0x05
      000334 F5                     650 	push	af
      000335 33                     651 	inc	sp
      000336 CDr00r00               652 	call	_getRandUint8
      000339 33                     653 	inc	sp
      00033A 21r00r00               654 	ld	hl, #_i
      00033D 73                     655 	ld	(hl), e
                                    656 ;Bownly/states/bownlyMP5Microgame.c:274: j = getRandUint8(5U);
      00033E 3E 05                  657 	ld	a, #0x05
      000340 F5                     658 	push	af
      000341 33                     659 	inc	sp
      000342 CDr00r00               660 	call	_getRandUint8
      000345 33                     661 	inc	sp
      000346 21r00r00               662 	ld	hl, #_j
      000349 73                     663 	ld	(hl), e
                                    664 ;Bownly/states/bownlyMP5Microgame.c:275: setupPanel(i*5U+j, i, j, getRandUint8(2U));
      00034A 3E 02                  665 	ld	a, #0x02
      00034C F5                     666 	push	af
      00034D 33                     667 	inc	sp
      00034E CDr00r00               668 	call	_getRandUint8
      000351 33                     669 	inc	sp
      000352 43                     670 	ld	b, e
      000353 FAr00r00               671 	ld	a, (#_i)
      000356 5F                     672 	ld	e, a
      000357 87                     673 	add	a, a
      000358 87                     674 	add	a, a
      000359 83                     675 	add	a, e
      00035A 21r00r00               676 	ld	hl, #_j
      00035D 86                     677 	add	a, (hl)
      00035E C5                     678 	push	bc
      00035F 33                     679 	inc	sp
      000360 66                     680 	ld	h, (hl)
                                    681 ;	spillPairReg hl
                                    682 ;	spillPairReg hl
      000361 E5                     683 	push	hl
      000362 33                     684 	inc	sp
      000363 21r00r00               685 	ld	hl, #_i
      000366 66                     686 	ld	h, (hl)
                                    687 ;	spillPairReg hl
                                    688 ;	spillPairReg hl
      000367 E5                     689 	push	hl
      000368 33                     690 	inc	sp
      000369 F5                     691 	push	af
      00036A 33                     692 	inc	sp
      00036B CDrAEr04               693 	call	_setupPanel
      00036E E8 04                  694 	add	sp, #4
                                    695 ;Bownly/states/bownlyMP5Microgame.c:277: if (mgDifficulty != 0U)  // AKA, if 1 or 2
      000370 FAr00r00               696 	ld	a, (#_mgDifficulty)
      000373 B7                     697 	or	a, a
      000374 28 7A                  698 	jr	Z, 00111$
                                    699 ;Bownly/states/bownlyMP5Microgame.c:279: k = getRandUint8(2U);  // Horz or vert
      000376 3E 02                  700 	ld	a, #0x02
      000378 F5                     701 	push	af
      000379 33                     702 	inc	sp
      00037A CDr00r00               703 	call	_getRandUint8
      00037D 33                     704 	inc	sp
      00037E 21r00r00               705 	ld	hl, #_k
      000381 73                     706 	ld	(hl), e
                                    707 ;Bownly/states/bownlyMP5Microgame.c:280: if (k == 0U)  // Horz
      000382 7E                     708 	ld	a, (hl)
      000383 B7                     709 	or	a, a
      000384 20 36                  710 	jr	NZ, 00108$
                                    711 ;Bownly/states/bownlyMP5Microgame.c:282: if (++i == 5U)
      000386 21r00r00               712 	ld	hl, #_i
      000389 34                     713 	inc	(hl)
      00038A 7E                     714 	ld	a, (hl)
      00038B D6 05                  715 	sub	a, #0x05
      00038D 20 05                  716 	jr	NZ, 00104$
                                    717 ;Bownly/states/bownlyMP5Microgame.c:283: i = 0U;
      00038F 21r00r00               718 	ld	hl, #_i
      000392 36 00                  719 	ld	(hl), #0x00
      000394                        720 00104$:
                                    721 ;Bownly/states/bownlyMP5Microgame.c:284: setupPanel(i*5U+j, i, j, getRandUint8(2U));
      000394 3E 02                  722 	ld	a, #0x02
      000396 F5                     723 	push	af
      000397 33                     724 	inc	sp
      000398 CDr00r00               725 	call	_getRandUint8
      00039B 33                     726 	inc	sp
      00039C 43                     727 	ld	b, e
      00039D FAr00r00               728 	ld	a, (#_i)
      0003A0 5F                     729 	ld	e, a
      0003A1 87                     730 	add	a, a
      0003A2 87                     731 	add	a, a
      0003A3 83                     732 	add	a, e
      0003A4 21r00r00               733 	ld	hl, #_j
      0003A7 86                     734 	add	a, (hl)
      0003A8 C5                     735 	push	bc
      0003A9 33                     736 	inc	sp
      0003AA 66                     737 	ld	h, (hl)
                                    738 ;	spillPairReg hl
                                    739 ;	spillPairReg hl
      0003AB E5                     740 	push	hl
      0003AC 33                     741 	inc	sp
      0003AD 21r00r00               742 	ld	hl, #_i
      0003B0 66                     743 	ld	h, (hl)
                                    744 ;	spillPairReg hl
                                    745 ;	spillPairReg hl
      0003B1 E5                     746 	push	hl
      0003B2 33                     747 	inc	sp
      0003B3 F5                     748 	push	af
      0003B4 33                     749 	inc	sp
      0003B5 CDrAEr04               750 	call	_setupPanel
      0003B8 E8 04                  751 	add	sp, #4
      0003BA 18 34                  752 	jr	00111$
      0003BC                        753 00108$:
                                    754 ;Bownly/states/bownlyMP5Microgame.c:288: if (++j == 5U)
      0003BC 21r00r00               755 	ld	hl, #_j
      0003BF 34                     756 	inc	(hl)
      0003C0 7E                     757 	ld	a, (hl)
      0003C1 D6 05                  758 	sub	a, #0x05
      0003C3 20 05                  759 	jr	NZ, 00106$
                                    760 ;Bownly/states/bownlyMP5Microgame.c:289: j = 0U;
      0003C5 21r00r00               761 	ld	hl, #_j
      0003C8 36 00                  762 	ld	(hl), #0x00
      0003CA                        763 00106$:
                                    764 ;Bownly/states/bownlyMP5Microgame.c:290: setupPanel(i*5U+j, i, j, getRandUint8(2U));
      0003CA 3E 02                  765 	ld	a, #0x02
      0003CC F5                     766 	push	af
      0003CD 33                     767 	inc	sp
      0003CE CDr00r00               768 	call	_getRandUint8
      0003D1 33                     769 	inc	sp
      0003D2 43                     770 	ld	b, e
      0003D3 FAr00r00               771 	ld	a, (#_i)
      0003D6 5F                     772 	ld	e, a
      0003D7 87                     773 	add	a, a
      0003D8 87                     774 	add	a, a
      0003D9 83                     775 	add	a, e
      0003DA 21r00r00               776 	ld	hl, #_j
      0003DD 86                     777 	add	a, (hl)
      0003DE C5                     778 	push	bc
      0003DF 33                     779 	inc	sp
      0003E0 66                     780 	ld	h, (hl)
                                    781 ;	spillPairReg hl
                                    782 ;	spillPairReg hl
      0003E1 E5                     783 	push	hl
      0003E2 33                     784 	inc	sp
      0003E3 21r00r00               785 	ld	hl, #_i
      0003E6 66                     786 	ld	h, (hl)
                                    787 ;	spillPairReg hl
                                    788 ;	spillPairReg hl
      0003E7 E5                     789 	push	hl
      0003E8 33                     790 	inc	sp
      0003E9 F5                     791 	push	af
      0003EA 33                     792 	inc	sp
      0003EB CDrAEr04               793 	call	_setupPanel
      0003EE E8 04                  794 	add	sp, #4
      0003F0                        795 00111$:
                                    796 ;Bownly/states/bownlyMP5Microgame.c:293: if (mgDifficulty == 2U)
      0003F0 FAr00r00               797 	ld	a, (#_mgDifficulty)
      0003F3 D6 02                  798 	sub	a, #0x02
      0003F5 C0                     799 	ret	NZ
                                    800 ;Bownly/states/bownlyMP5Microgame.c:295: if (k == 0U)  // Horz
      0003F6 FAr00r00               801 	ld	a, (#_k)
      0003F9 B7                     802 	or	a, a
      0003FA 20 35                  803 	jr	NZ, 00117$
                                    804 ;Bownly/states/bownlyMP5Microgame.c:297: if (++i == 5U)
      0003FC 21r00r00               805 	ld	hl, #_i
      0003FF 34                     806 	inc	(hl)
      000400 7E                     807 	ld	a, (hl)
      000401 D6 05                  808 	sub	a, #0x05
      000403 20 05                  809 	jr	NZ, 00113$
                                    810 ;Bownly/states/bownlyMP5Microgame.c:298: i = 0U;
      000405 21r00r00               811 	ld	hl, #_i
      000408 36 00                  812 	ld	(hl), #0x00
      00040A                        813 00113$:
                                    814 ;Bownly/states/bownlyMP5Microgame.c:299: setupPanel(i*5U+j, i, j, getRandUint8(2U));
      00040A 3E 02                  815 	ld	a, #0x02
      00040C F5                     816 	push	af
      00040D 33                     817 	inc	sp
      00040E CDr00r00               818 	call	_getRandUint8
      000411 33                     819 	inc	sp
      000412 43                     820 	ld	b, e
      000413 FAr00r00               821 	ld	a, (#_i)
      000416 5F                     822 	ld	e, a
      000417 87                     823 	add	a, a
      000418 87                     824 	add	a, a
      000419 83                     825 	add	a, e
      00041A 21r00r00               826 	ld	hl, #_j
      00041D 86                     827 	add	a, (hl)
      00041E C5                     828 	push	bc
      00041F 33                     829 	inc	sp
      000420 66                     830 	ld	h, (hl)
                                    831 ;	spillPairReg hl
                                    832 ;	spillPairReg hl
      000421 E5                     833 	push	hl
      000422 33                     834 	inc	sp
      000423 21r00r00               835 	ld	hl, #_i
      000426 66                     836 	ld	h, (hl)
                                    837 ;	spillPairReg hl
                                    838 ;	spillPairReg hl
      000427 E5                     839 	push	hl
      000428 33                     840 	inc	sp
      000429 F5                     841 	push	af
      00042A 33                     842 	inc	sp
      00042B CDrAEr04               843 	call	_setupPanel
      00042E E8 04                  844 	add	sp, #4
      000430 C9                     845 	ret
      000431                        846 00117$:
                                    847 ;Bownly/states/bownlyMP5Microgame.c:303: if (++j == 5U)
      000431 21r00r00               848 	ld	hl, #_j
      000434 34                     849 	inc	(hl)
      000435 7E                     850 	ld	a, (hl)
      000436 D6 05                  851 	sub	a, #0x05
      000438 20 05                  852 	jr	NZ, 00115$
                                    853 ;Bownly/states/bownlyMP5Microgame.c:304: j = 0U;
      00043A 21r00r00               854 	ld	hl, #_j
      00043D 36 00                  855 	ld	(hl), #0x00
      00043F                        856 00115$:
                                    857 ;Bownly/states/bownlyMP5Microgame.c:305: setupPanel(i*5U+j, i, j, getRandUint8(2U));
      00043F 3E 02                  858 	ld	a, #0x02
      000441 F5                     859 	push	af
      000442 33                     860 	inc	sp
      000443 CDr00r00               861 	call	_getRandUint8
      000446 33                     862 	inc	sp
      000447 43                     863 	ld	b, e
      000448 FAr00r00               864 	ld	a, (#_i)
      00044B 5F                     865 	ld	e, a
      00044C 87                     866 	add	a, a
      00044D 87                     867 	add	a, a
      00044E 83                     868 	add	a, e
      00044F 21r00r00               869 	ld	hl, #_j
      000452 86                     870 	add	a, (hl)
      000453 C5                     871 	push	bc
      000454 33                     872 	inc	sp
      000455 66                     873 	ld	h, (hl)
                                    874 ;	spillPairReg hl
                                    875 ;	spillPairReg hl
      000456 E5                     876 	push	hl
      000457 33                     877 	inc	sp
      000458 21r00r00               878 	ld	hl, #_i
      00045B 66                     879 	ld	h, (hl)
                                    880 ;	spillPairReg hl
                                    881 ;	spillPairReg hl
      00045C E5                     882 	push	hl
      00045D 33                     883 	inc	sp
      00045E F5                     884 	push	af
      00045F 33                     885 	inc	sp
      000460 CDrAEr04               886 	call	_setupPanel
      000463 E8 04                  887 	add	sp, #4
                                    888 ;Bownly/states/bownlyMP5Microgame.c:308: }
      000465 C9                     889 	ret
                                    890 ;Bownly/states/bownlyMP5Microgame.c:310: static void incrementPanel(BownlyPanel* panel)
                                    891 ;	---------------------------------
                                    892 ; Function incrementPanel
                                    893 ; ---------------------------------
      000466                        894 _incrementPanel:
                                    895 ;Bownly/states/bownlyMP5Microgame.c:312: if (panel->panelValue != 6U)
      000466 F8 02                  896 	ldhl	sp,	#2
      000468 2A                     897 	ld	a, (hl+)
      000469 5F                     898 	ld	e, a
      00046A 56                     899 	ld	d, (hl)
      00046B 4B                     900 	ld	c, e
      00046C 42                     901 	ld	b, d
      00046D 03                     902 	inc	bc
      00046E 0A                     903 	ld	a, (bc)
      00046F D6 06                  904 	sub	a, #0x06
      000471 C8                     905 	ret	Z
                                    906 ;Bownly/states/bownlyMP5Microgame.c:314: panel->isFlipping = 1U;
      000472 21 05 00               907 	ld	hl, #0x0005
      000475 19                     908 	add	hl, de
      000476 36 01                  909 	ld	(hl), #0x01
                                    910 ;Bownly/states/bownlyMP5Microgame.c:316: l = panel->panelValue + 1U;
      000478 0A                     911 	ld	a, (bc)
      000479 3C                     912 	inc	a
      00047A 21r00r00               913 	ld	hl, #_l
      00047D 77                     914 	ld	(hl), a
                                    915 ;Bownly/states/bownlyMP5Microgame.c:317: if (l == 5U)  // Panel has exceeded max capacity
      00047E 7E                     916 	ld	a, (hl)
      00047F D6 05                  917 	sub	a, #0x05
      000481 20 1D                  918 	jr	NZ, 00104$
                                    919 ;Bownly/states/bownlyMP5Microgame.c:319: l = 6U;
      000483 21r00r00               920 	ld	hl, #_l
      000486 36 06                  921 	ld	(hl), #0x06
                                    922 ;Bownly/states/bownlyMP5Microgame.c:320: if (screenShakeTick == 0U)
      000488 21r01r00               923 	ld	hl, #_screenShakeTick
      00048B 7E                     924 	ld	a, (hl)
      00048C B7                     925 	or	a, a
      00048D 20 02                  926 	jr	NZ, 00102$
                                    927 ;Bownly/states/bownlyMP5Microgame.c:321: screenShakeTick = 1U;
      00048F 36 01                  928 	ld	(hl), #0x01
      000491                        929 00102$:
                                    930 ;Bownly/states/bownlyMP5Microgame.c:323: mgStatus = LOST;
      000491 21r00r00               931 	ld	hl, #_mgStatus
      000494 36 03                  932 	ld	(hl), #0x03
                                    933 ;Bownly/states/bownlyMP5Microgame.c:325: playHurtSfx();
      000496 C5                     934 	push	bc
      000497 CDr00r00               935 	call	_playHurtSfx
      00049A C1                     936 	pop	bc
                                    937 ;C:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      00049B 21r2Ar00               938 	ld	hl, #(_shadow_OAM + 42)
      00049E 36 41                  939 	ld	(hl), #0x41
                                    940 ;Bownly/states/bownlyMP5Microgame.c:326: set_sprite_tile(SPRID_HEARTS + 6U, SPRTILE_HEARTS + 1U);
      0004A0                        941 00104$:
                                    942 ;Bownly/states/bownlyMP5Microgame.c:328: panel->panelValue = l;
      0004A0 21r00r00               943 	ld	hl, #_l
      0004A3 7E                     944 	ld	a, (hl)
      0004A4 02                     945 	ld	(bc), a
                                    946 ;Bownly/states/bownlyMP5Microgame.c:330: if (l == 4U)  // Level 5
      0004A5 7E                     947 	ld	a, (hl)
      0004A6 D6 04                  948 	sub	a, #0x04
      0004A8 C0                     949 	ret	NZ
                                    950 ;Bownly/states/bownlyMP5Microgame.c:331: --remaining5s;
      0004A9 21r9Er00               951 	ld	hl, #_remaining5s
      0004AC 35                     952 	dec	(hl)
                                    953 ;Bownly/states/bownlyMP5Microgame.c:333: }
      0004AD C9                     954 	ret
                                    955 ;Bownly/states/bownlyMP5Microgame.c:335: static void setupPanel(UINT8 index, UINT8 x, UINT8 y, UINT8 val)
                                    956 ;	---------------------------------
                                    957 ; Function setupPanel
                                    958 ; ---------------------------------
      0004AE                        959 _setupPanel:
      0004AE E8 FB                  960 	add	sp, #-5
                                    961 ;Bownly/states/bownlyMP5Microgame.c:337: gridPanels[index].xIndex = x;
      0004B0 F8 07                  962 	ldhl	sp,	#7
      0004B2 4E                     963 	ld	c, (hl)
      0004B3 06 00                  964 	ld	b, #0x00
      0004B5 69                     965 	ld	l, c
      0004B6 60                     966 	ld	h, b
      0004B7 29                     967 	add	hl, hl
      0004B8 09                     968 	add	hl, bc
      0004B9 29                     969 	add	hl, hl
      0004BA 01r08r00               970 	ld	bc,#_gridPanels
      0004BD 09                     971 	add	hl,bc
      0004BE 4D                     972 	ld	c, l
      0004BF 44                     973 	ld	b, h
      0004C0 21 02 00               974 	ld	hl, #0x0002
      0004C3 09                     975 	add	hl, bc
      0004C4 E5                     976 	push	hl
      0004C5 7D                     977 	ld	a, l
      0004C6 F8 04                  978 	ldhl	sp,	#4
      0004C8 77                     979 	ld	(hl), a
      0004C9 E1                     980 	pop	hl
      0004CA 7C                     981 	ld	a, h
      0004CB F8 03                  982 	ldhl	sp,	#3
      0004CD 32                     983 	ld	(hl-), a
      0004CE 2A                     984 	ld	a, (hl+)
      0004CF 5F                     985 	ld	e, a
      0004D0 56                     986 	ld	d, (hl)
      0004D1 F8 08                  987 	ldhl	sp,	#8
      0004D3 7E                     988 	ld	a, (hl)
      0004D4 12                     989 	ld	(de), a
                                    990 ;Bownly/states/bownlyMP5Microgame.c:338: gridPanels[index].yIndex = y;
      0004D5 21 03 00               991 	ld	hl, #0x0003
      0004D8 09                     992 	add	hl, bc
      0004D9 33                     993 	inc	sp
      0004DA 33                     994 	inc	sp
      0004DB 5D                     995 	ld	e, l
      0004DC 54                     996 	ld	d, h
      0004DD D5                     997 	push	de
      0004DE F8 09                  998 	ldhl	sp,	#9
                                    999 ;Bownly/states/bownlyMP5Microgame.c:339: gridPanels[index].panelValue = val;
      0004E0 2A                    1000 	ld	a, (hl+)
      0004E1 12                    1001 	ld	(de), a
      0004E2 59                    1002 	ld	e, c
      0004E3 50                    1003 	ld	d, b
      0004E4 13                    1004 	inc	de
      0004E5 7E                    1005 	ld	a, (hl)
      0004E6 12                    1006 	ld	(de), a
                                   1007 ;Bownly/states/bownlyMP5Microgame.c:340: gridPanels[index].panelId = index;
      0004E7 F8 07                 1008 	ldhl	sp,	#7
      0004E9 7E                    1009 	ld	a, (hl)
      0004EA 02                    1010 	ld	(bc), a
                                   1011 ;Bownly/states/bownlyMP5Microgame.c:342: gridPanels[index].isWinner = 1U;
      0004EB 21 04 00              1012 	ld	hl, #0x0004
      0004EE 09                    1013 	add	hl, bc
                                   1014 ;Bownly/states/bownlyMP5Microgame.c:341: if (val == 5U)
      0004EF E5                    1015 	push	hl
      0004F0 F8 0C                 1016 	ldhl	sp,	#12
      0004F2 7E                    1017 	ld	a, (hl)
      0004F3 D6 05                 1018 	sub	a, #0x05
      0004F5 E1                    1019 	pop	hl
      0004F6 20 04                 1020 	jr	NZ, 00102$
                                   1021 ;Bownly/states/bownlyMP5Microgame.c:342: gridPanels[index].isWinner = 1U;
      0004F8 36 01                 1022 	ld	(hl), #0x01
      0004FA 18 02                 1023 	jr	00103$
      0004FC                       1024 00102$:
                                   1025 ;Bownly/states/bownlyMP5Microgame.c:344: gridPanels[index].isWinner = 0U;
      0004FC 36 00                 1026 	ld	(hl), #0x00
      0004FE                       1027 00103$:
                                   1028 ;Bownly/states/bownlyMP5Microgame.c:345: gridPanels[index].isFlipping = 0U;
      0004FE 21 05 00              1029 	ld	hl, #0x0005
      000501 09                    1030 	add	hl, bc
      000502 36 00                 1031 	ld	(hl), #0x00
                                   1032 ;Bownly/states/bownlyMP5Microgame.c:348: panelsYOrigin + (gridPanels[index].yIndex << 1U), &gridPanels[index]);
      000504 D1                    1033 	pop	de
      000505 D5                    1034 	push	de
      000506 1A                    1035 	ld	a, (de)
      000507 87                    1036 	add	a, a
      000508 C6 04                 1037 	add	a, #0x04
      00050A F8 04                 1038 	ldhl	sp,	#4
                                   1039 ;Bownly/states/bownlyMP5Microgame.c:347: drawPanel(panelsXOrigin + (gridPanels[index].xIndex << 1U),
      00050C 32                    1040 	ld	(hl-), a
      00050D 2B                    1041 	dec	hl
      00050E 2A                    1042 	ld	a, (hl+)
      00050F 5F                    1043 	ld	e, a
      000510 2A                    1044 	ld	a, (hl+)
      000511 57                    1045 	ld	d, a
      000512 1A                    1046 	ld	a, (de)
      000513 87                    1047 	add	a, a
      000514 C6 05                 1048 	add	a, #0x05
      000516 C5                    1049 	push	bc
      000517 66                    1050 	ld	h, (hl)
                                   1051 ;	spillPairReg hl
                                   1052 ;	spillPairReg hl
      000518 E5                    1053 	push	hl
      000519 33                    1054 	inc	sp
      00051A F5                    1055 	push	af
      00051B 33                    1056 	inc	sp
      00051C CDrD8r05              1057 	call	_drawPanel
                                   1058 ;Bownly/states/bownlyMP5Microgame.c:349: }
      00051F E8 09                 1059 	add	sp, #9
      000521 C9                    1060 	ret
                                   1061 ;Bownly/states/bownlyMP5Microgame.c:353: static void animatePreston()
                                   1062 ;	---------------------------------
                                   1063 ; Function animatePreston
                                   1064 ; ---------------------------------
      000522                       1065 _animatePreston:
                                   1066 ;Bownly/states/bownlyMP5Microgame.c:355: if (mgStatus == LOST)  // Hurt anims
      000522 FAr00r00              1067 	ld	a, (#_mgStatus)
      000525 D6 03                 1068 	sub	a, #0x03
      000527 20 07                 1069 	jr	NZ, 00119$
                                   1070 ;Bownly/states/bownlyMP5Microgame.c:356: animFrame = 6U;
      000529 21r00r00              1071 	ld	hl, #_animFrame
      00052C 36 06                 1072 	ld	(hl), #0x06
      00052E 18 57                 1073 	jr	00120$
      000530                       1074 00119$:
                                   1075 ;Bownly/states/bownlyMP5Microgame.c:357: else if (flipAnimTick != 0U)  // Attack anims
      000530 21r02r00              1076 	ld	hl, #_flipAnimTick
      000533 7E                    1077 	ld	a, (hl)
      000534 B7                    1078 	or	a, a
      000535 28 3A                 1079 	jr	Z, 00116$
                                   1080 ;Bownly/states/bownlyMP5Microgame.c:360: if (flipAnimTick == 1U)
      000537 7E                    1081 	ld	a, (hl)
      000538 3D                    1082 	dec	a
      000539 20 07                 1083 	jr	NZ, 00111$
                                   1084 ;Bownly/states/bownlyMP5Microgame.c:362: animFrame = 3U;
      00053B 21r00r00              1085 	ld	hl, #_animFrame
      00053E 36 03                 1086 	ld	(hl), #0x03
      000540 18 45                 1087 	jr	00120$
      000542                       1088 00111$:
                                   1089 ;Bownly/states/bownlyMP5Microgame.c:363: else if (flipAnimTick == 2U || flipAnimTick == 3U)
      000542 FAr02r00              1090 	ld	a,(#_flipAnimTick)
      000545 FE 02                 1091 	cp	a,#0x02
      000547 28 04                 1092 	jr	Z, 00106$
      000549 D6 03                 1093 	sub	a, #0x03
      00054B 20 07                 1094 	jr	NZ, 00107$
      00054D                       1095 00106$:
                                   1096 ;Bownly/states/bownlyMP5Microgame.c:364: animFrame = 3U;
      00054D 21r00r00              1097 	ld	hl, #_animFrame
      000550 36 03                 1098 	ld	(hl), #0x03
      000552 18 33                 1099 	jr	00120$
      000554                       1100 00107$:
                                   1101 ;Bownly/states/bownlyMP5Microgame.c:365: else if (flipAnimTick == 4U || flipAnimTick == 5U || flipAnimTick == 6U)
      000554 FAr02r00              1102 	ld	a,(#_flipAnimTick)
      000557 FE 04                 1103 	cp	a,#0x04
      000559 28 08                 1104 	jr	Z, 00101$
      00055B FE 05                 1105 	cp	a,#0x05
      00055D 28 04                 1106 	jr	Z, 00101$
      00055F D6 06                 1107 	sub	a, #0x06
      000561 20 07                 1108 	jr	NZ, 00102$
      000563                       1109 00101$:
                                   1110 ;Bownly/states/bownlyMP5Microgame.c:366: animFrame = 4U;
      000563 21r00r00              1111 	ld	hl, #_animFrame
      000566 36 04                 1112 	ld	(hl), #0x04
      000568 18 1D                 1113 	jr	00120$
      00056A                       1114 00102$:
                                   1115 ;Bownly/states/bownlyMP5Microgame.c:369: animFrame = 5U;
      00056A 21r00r00              1116 	ld	hl, #_animFrame
      00056D 36 05                 1117 	ld	(hl), #0x05
      00056F 18 16                 1118 	jr	00120$
      000571                       1119 00116$:
                                   1120 ;Bownly/states/bownlyMP5Microgame.c:374: animFrame = (animTick >> 4U) % 4U;
      000571 FAr00r00              1121 	ld	a, (#_animTick)
      000574 CB 37                 1122 	swap	a
      000576 E6 03                 1123 	and	a, #0x3
                                   1124 ;	spillPairReg hl
                                   1125 ;	spillPairReg hl
      000578 EAr00r00              1126 	ld	(_animFrame), a
                                   1127 ;Bownly/states/bownlyMP5Microgame.c:375: if (animFrame == 3U)
      00057B FAr00r00              1128 	ld	a, (#_animFrame)
      00057E D6 03                 1129 	sub	a, #0x03
      000580 20 05                 1130 	jr	NZ, 00120$
                                   1131 ;Bownly/states/bownlyMP5Microgame.c:376: animFrame = 1U;
      000582 21r00r00              1132 	ld	hl, #_animFrame
      000585 36 01                 1133 	ld	(hl), #0x01
      000587                       1134 00120$:
                                   1135 ;Bownly/states/bownlyMP5Microgame.c:379: if (prestonIsHorz == FALSE)
      000587 FAr06r00              1136 	ld	a, (#_prestonIsHorz)
      00058A B7                    1137 	or	a, a
      00058B 20 07                 1138 	jr	NZ, 00122$
                                   1139 ;Bownly/states/bownlyMP5Microgame.c:380: animFrame += 7U;
      00058D 21r00r00              1140 	ld	hl, #_animFrame
      000590 7E                    1141 	ld	a, (hl)
      000591 C6 07                 1142 	add	a, #0x07
      000593 77                    1143 	ld	(hl), a
      000594                       1144 00122$:
                                   1145 ;Bownly/states/bownlyMP5Microgame.c:382: i = (prestonXIndex << 4U) + prestonXOffset;
      000594 FAr04r00              1146 	ld	a, (#_prestonXIndex)
      000597 CB 37                 1147 	swap	a
      000599 E6 F0                 1148 	and	a, #0xf0
      00059B C6 20                 1149 	add	a, #0x20
      00059D EAr00r00              1150 	ld	(#_i),a
                                   1151 ;Bownly/states/bownlyMP5Microgame.c:383: j = (prestonYIndex << 4U) + prestonYOffset;
      0005A0 FAr05r00              1152 	ld	a, (#_prestonYIndex)
      0005A3 CB 37                 1153 	swap	a
      0005A5 E6 F0                 1154 	and	a, #0xf0
      0005A7 C6 20                 1155 	add	a, #0x20
      0005A9 21r00r00              1156 	ld	hl, #_j
      0005AC 77                    1157 	ld	(hl), a
                                   1158 ;Bownly/states/bownlyMP5Microgame.c:384: move_metasprite(bownlySprPreston_metasprites[animFrame], SPRTILE_PRESTON, SPRID_PRESTON, i, j);
      0005AD 46                    1159 	ld	b, (hl)
      0005AE 21r00r00              1160 	ld	hl, #_i
      0005B1 4E                    1161 	ld	c, (hl)
      0005B2 11r00r00              1162 	ld	de, #_bownlySprPreston_metasprites+0
      0005B5 21r00r00              1163 	ld	hl, #_animFrame
      0005B8 6E                    1164 	ld	l, (hl)
                                   1165 ;	spillPairReg hl
                                   1166 ;	spillPairReg hl
      0005B9 26 00                 1167 	ld	h, #0x00
                                   1168 ;	spillPairReg hl
                                   1169 ;	spillPairReg hl
      0005BB 29                    1170 	add	hl, hl
      0005BC 19                    1171 	add	hl, de
      0005BD 2A                    1172 	ld	a, (hl+)
      0005BE 6E                    1173 	ld	l, (hl)
                                   1174 ;	spillPairReg hl
                                   1175 ;C:/gbdk/include/gb/metasprites.h:138: __current_metasprite = metasprite;
      0005BF 5F                    1176 	ld	e, a
      0005C0 55                    1177 	ld	d, l
      0005C1 21r00r00              1178 	ld	hl, #___current_metasprite
      0005C4 7B                    1179 	ld	a, e
      0005C5 22                    1180 	ld	(hl+), a
      0005C6 72                    1181 	ld	(hl), d
                                   1182 ;C:/gbdk/include/gb/metasprites.h:139: __current_base_tile = base_tile;
      0005C7 21r00r00              1183 	ld	hl, #___current_base_tile
      0005CA 36 00                 1184 	ld	(hl), #0x00
                                   1185 ;C:/gbdk/include/gb/metasprites.h:140: return __move_metasprite(base_sprite, x, y);
      0005CC C5                    1186 	push	bc
      0005CD 33                    1187 	inc	sp
      0005CE 61                    1188 	ld	h, c
      0005CF 2E 00                 1189 	ld	l, #0x00
      0005D1 E5                    1190 	push	hl
      0005D2 CDr00r00              1191 	call	___move_metasprite
      0005D5 E8 03                 1192 	add	sp, #3
                                   1193 ;Bownly/states/bownlyMP5Microgame.c:384: move_metasprite(bownlySprPreston_metasprites[animFrame], SPRTILE_PRESTON, SPRID_PRESTON, i, j);
                                   1194 ;Bownly/states/bownlyMP5Microgame.c:385: }
      0005D7 C9                    1195 	ret
                                   1196 ;Bownly/states/bownlyMP5Microgame.c:387: static void drawPanel(UINT8 xCoord, UINT8 yCoord, BownlyPanel* panel)
                                   1197 ;	---------------------------------
                                   1198 ; Function drawPanel
                                   1199 ; ---------------------------------
      0005D8                       1200 _drawPanel:
                                   1201 ;Bownly/states/bownlyMP5Microgame.c:389: switch(panel->panelValue)
      0005D8 F8 04                 1202 	ldhl	sp,	#4
      0005DA 2A                    1203 	ld	a, (hl+)
      0005DB 4F                    1204 	ld	c, a
      0005DC 46                    1205 	ld	b, (hl)
      0005DD 03                    1206 	inc	bc
      0005DE 0A                    1207 	ld	a, (bc)
      0005DF 4F                    1208 	ld	c, a
      0005E0 3E 05                 1209 	ld	a, #0x05
      0005E2 91                    1210 	sub	a, c
      0005E3 DAr79r06              1211 	jp	C, 00107$
      0005E6 06 00                 1212 	ld	b, #0x00
      0005E8 21rEFr05              1213 	ld	hl, #00116$
      0005EB 09                    1214 	add	hl, bc
      0005EC 09                    1215 	add	hl, bc
      0005ED 09                    1216 	add	hl, bc
      0005EE E9                    1217 	jp	(hl)
      0005EF                       1218 00116$:
      0005EF C3r01r06              1219 	jp	00101$
      0005F2 C3r15r06              1220 	jp	00102$
      0005F5 C3r29r06              1221 	jp	00103$
      0005F8 C3r3Dr06              1222 	jp	00104$
      0005FB C3r51r06              1223 	jp	00105$
      0005FE C3r65r06              1224 	jp	00106$
                                   1225 ;Bownly/states/bownlyMP5Microgame.c:391: case 0U: set_bkg_tiles(xCoord, yCoord, 2U, 2U, panel0Map); break;
      000601                       1226 00101$:
      000601 11r00r00              1227 	ld	de, #_panel0Map
      000604 D5                    1228 	push	de
      000605 21 02 02              1229 	ld	hl, #0x202
      000608 E5                    1230 	push	hl
      000609 F8 07                 1231 	ldhl	sp,	#7
      00060B 3A                    1232 	ld	a, (hl-)
      00060C 57                    1233 	ld	d, a
      00060D 5E                    1234 	ld	e, (hl)
      00060E D5                    1235 	push	de
      00060F CDr00r00              1236 	call	_set_bkg_tiles
      000612 E8 06                 1237 	add	sp, #6
      000614 C9                    1238 	ret
                                   1239 ;Bownly/states/bownlyMP5Microgame.c:392: case 1U: set_bkg_tiles(xCoord, yCoord, 2U, 2U, panel1Map); break;
      000615                       1240 00102$:
      000615 11r00r00              1241 	ld	de, #_panel1Map
      000618 D5                    1242 	push	de
      000619 21 02 02              1243 	ld	hl, #0x202
      00061C E5                    1244 	push	hl
      00061D F8 07                 1245 	ldhl	sp,	#7
      00061F 3A                    1246 	ld	a, (hl-)
      000620 57                    1247 	ld	d, a
      000621 5E                    1248 	ld	e, (hl)
      000622 D5                    1249 	push	de
      000623 CDr00r00              1250 	call	_set_bkg_tiles
      000626 E8 06                 1251 	add	sp, #6
      000628 C9                    1252 	ret
                                   1253 ;Bownly/states/bownlyMP5Microgame.c:393: case 2U: set_bkg_tiles(xCoord, yCoord, 2U, 2U, panel2Map); break;
      000629                       1254 00103$:
      000629 11r00r00              1255 	ld	de, #_panel2Map
      00062C D5                    1256 	push	de
      00062D 21 02 02              1257 	ld	hl, #0x202
      000630 E5                    1258 	push	hl
      000631 F8 07                 1259 	ldhl	sp,	#7
      000633 3A                    1260 	ld	a, (hl-)
      000634 57                    1261 	ld	d, a
      000635 5E                    1262 	ld	e, (hl)
      000636 D5                    1263 	push	de
      000637 CDr00r00              1264 	call	_set_bkg_tiles
      00063A E8 06                 1265 	add	sp, #6
      00063C C9                    1266 	ret
                                   1267 ;Bownly/states/bownlyMP5Microgame.c:394: case 3U: set_bkg_tiles(xCoord, yCoord, 2U, 2U, panel3Map); break;
      00063D                       1268 00104$:
      00063D 11r00r00              1269 	ld	de, #_panel3Map
      000640 D5                    1270 	push	de
      000641 21 02 02              1271 	ld	hl, #0x202
      000644 E5                    1272 	push	hl
      000645 F8 07                 1273 	ldhl	sp,	#7
      000647 3A                    1274 	ld	a, (hl-)
      000648 57                    1275 	ld	d, a
      000649 5E                    1276 	ld	e, (hl)
      00064A D5                    1277 	push	de
      00064B CDr00r00              1278 	call	_set_bkg_tiles
      00064E E8 06                 1279 	add	sp, #6
      000650 C9                    1280 	ret
                                   1281 ;Bownly/states/bownlyMP5Microgame.c:395: case 4U: set_bkg_tiles(xCoord, yCoord, 2U, 2U, panel4Map); break;
      000651                       1282 00105$:
      000651 11r00r00              1283 	ld	de, #_panel4Map
      000654 D5                    1284 	push	de
      000655 21 02 02              1285 	ld	hl, #0x202
      000658 E5                    1286 	push	hl
      000659 F8 07                 1287 	ldhl	sp,	#7
      00065B 3A                    1288 	ld	a, (hl-)
      00065C 57                    1289 	ld	d, a
      00065D 5E                    1290 	ld	e, (hl)
      00065E D5                    1291 	push	de
      00065F CDr00r00              1292 	call	_set_bkg_tiles
      000662 E8 06                 1293 	add	sp, #6
      000664 C9                    1294 	ret
                                   1295 ;Bownly/states/bownlyMP5Microgame.c:396: case 5U: set_bkg_tiles(xCoord, yCoord, 2U, 2U, panelPointMap); break;
      000665                       1296 00106$:
      000665 11r00r00              1297 	ld	de, #_panelPointMap
      000668 D5                    1298 	push	de
      000669 21 02 02              1299 	ld	hl, #0x202
      00066C E5                    1300 	push	hl
      00066D F8 07                 1301 	ldhl	sp,	#7
      00066F 3A                    1302 	ld	a, (hl-)
      000670 57                    1303 	ld	d, a
      000671 5E                    1304 	ld	e, (hl)
      000672 D5                    1305 	push	de
      000673 CDr00r00              1306 	call	_set_bkg_tiles
      000676 E8 06                 1307 	add	sp, #6
      000678 C9                    1308 	ret
                                   1309 ;Bownly/states/bownlyMP5Microgame.c:397: default: set_bkg_tiles(xCoord, yCoord, 2U, 2U, panelXMap); break;
      000679                       1310 00107$:
      000679 11r00r00              1311 	ld	de, #_panelXMap
      00067C D5                    1312 	push	de
      00067D 21 02 02              1313 	ld	hl, #0x202
      000680 E5                    1314 	push	hl
      000681 F8 07                 1315 	ldhl	sp,	#7
      000683 3A                    1316 	ld	a, (hl-)
      000684 57                    1317 	ld	d, a
      000685 5E                    1318 	ld	e, (hl)
      000686 D5                    1319 	push	de
      000687 CDr00r00              1320 	call	_set_bkg_tiles
      00068A E8 06                 1321 	add	sp, #6
                                   1322 ;Bownly/states/bownlyMP5Microgame.c:398: }
                                   1323 ;Bownly/states/bownlyMP5Microgame.c:399: }
      00068C C9                    1324 	ret
                                   1325 ;Bownly/states/bownlyMP5Microgame.c:401: static void setupHearts()
                                   1326 ;	---------------------------------
                                   1327 ; Function setupHearts
                                   1328 ; ---------------------------------
      00068D                       1329 _setupHearts:
                                   1330 ;Bownly/states/bownlyMP5Microgame.c:403: for (i = 0; i != 7; ++i)
      00068D 21r00r00              1331 	ld	hl, #_i
      000690 36 00                 1332 	ld	(hl), #0x00
      000692                       1333 00105$:
                                   1334 ;Bownly/states/bownlyMP5Microgame.c:405: set_sprite_tile(SPRID_HEARTS + i, SPRTILE_HEARTS + 1U);
      000692 21r00r00              1335 	ld	hl, #_i
      000695 4E                    1336 	ld	c, (hl)
      000696 0C                    1337 	inc	c
      000697 0C                    1338 	inc	c
      000698 0C                    1339 	inc	c
      000699 0C                    1340 	inc	c
                                   1341 ;C:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      00069A 26 00                 1342 	ld	h, #0x00
                                   1343 ;	spillPairReg hl
                                   1344 ;	spillPairReg hl
      00069C 69                    1345 	ld	l, c
      00069D 29                    1346 	add	hl, hl
      00069E 29                    1347 	add	hl, hl
      00069F 11r00r00              1348 	ld	de, #_shadow_OAM
      0006A2 19                    1349 	add	hl, de
      0006A3 23                    1350 	inc	hl
      0006A4 23                    1351 	inc	hl
      0006A5 36 41                 1352 	ld	(hl), #0x41
                                   1353 ;Bownly/states/bownlyMP5Microgame.c:406: move_sprite(SPRID_HEARTS + i, 136U, 47U + 12U * i);
      0006A7 FAr00r00              1354 	ld	a, (#_i)
      0006AA 4F                    1355 	ld	c, a
      0006AB 87                    1356 	add	a, a
      0006AC 81                    1357 	add	a, c
      0006AD 87                    1358 	add	a, a
      0006AE 87                    1359 	add	a, a
      0006AF C6 2F                 1360 	add	a, #0x2f
      0006B1 4F                    1361 	ld	c, a
      0006B2 21r00r00              1362 	ld	hl, #_i
      0006B5 46                    1363 	ld	b, (hl)
      0006B6 04                    1364 	inc	b
      0006B7 04                    1365 	inc	b
      0006B8 04                    1366 	inc	b
      0006B9 04                    1367 	inc	b
                                   1368 ;C:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      0006BA 68                    1369 	ld	l, b
                                   1370 ;	spillPairReg hl
                                   1371 ;	spillPairReg hl
      0006BB 26 00                 1372 	ld	h, #0x00
                                   1373 ;	spillPairReg hl
                                   1374 ;	spillPairReg hl
      0006BD 29                    1375 	add	hl, hl
      0006BE 29                    1376 	add	hl, hl
      0006BF 11r00r00              1377 	ld	de, #_shadow_OAM
      0006C2 19                    1378 	add	hl, de
                                   1379 ;C:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      0006C3 79                    1380 	ld	a, c
      0006C4 22                    1381 	ld	(hl+), a
      0006C5 36 88                 1382 	ld	(hl), #0x88
                                   1383 ;Bownly/states/bownlyMP5Microgame.c:403: for (i = 0; i != 7; ++i)
      0006C7 21r00r00              1384 	ld	hl, #_i
      0006CA 34                    1385 	inc	(hl)
      0006CB 7E                    1386 	ld	a, (hl)
      0006CC D6 07                 1387 	sub	a, #0x07
      0006CE 20 C2                 1388 	jr	NZ, 00105$
                                   1389 ;C:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0006D0 21r2Ar00              1390 	ld	hl, #(_shadow_OAM + 42)
      0006D3 36 40                 1391 	ld	(hl), #0x40
                                   1392 ;Bownly/states/bownlyMP5Microgame.c:408: set_sprite_tile(SPRID_HEARTS + 6U, SPRTILE_HEARTS);
                                   1393 ;Bownly/states/bownlyMP5Microgame.c:409: }
      0006D5 C9                    1394 	ret
                                   1395 ;Bownly/states/bownlyMP5Microgame.c:411: static void tryShakeScreen()
                                   1396 ;	---------------------------------
                                   1397 ; Function tryShakeScreen
                                   1398 ; ---------------------------------
      0006D6                       1399 _tryShakeScreen:
                                   1400 ;Bownly/states/bownlyMP5Microgame.c:413: if (screenShakeTick != 0U)
      0006D6 21r01r00              1401 	ld	hl, #_screenShakeTick
      0006D9 7E                    1402 	ld	a, (hl)
      0006DA B7                    1403 	or	a, a
      0006DB C8                    1404 	ret	Z
                                   1405 ;Bownly/states/bownlyMP5Microgame.c:415: if (screenShakeTick != 26U)
      0006DC 7E                    1406 	ld	a, (hl)
      0006DD D6 1A                 1407 	sub	a, #0x1a
      0006DF C8                    1408 	ret	Z
                                   1409 ;Bownly/states/bownlyMP5Microgame.c:417: ++screenShakeTick;
      0006E0 21r01r00              1410 	ld	hl, #_screenShakeTick
      0006E3 34                    1411 	inc	(hl)
                                   1412 ;Bownly/states/bownlyMP5Microgame.c:418: switch (screenShakeTick)
      0006E4 7E                    1413 	ld	a, (hl)
      0006E5 D6 05                 1414 	sub	a, #0x05
      0006E7 28 1D                 1415 	jr	Z, 00101$
      0006E9 FAr01r00              1416 	ld	a, (#_screenShakeTick)
      0006EC D6 0A                 1417 	sub	a, #0x0a
      0006EE 28 1C                 1418 	jr	Z, 00102$
      0006F0 FAr01r00              1419 	ld	a, (#_screenShakeTick)
      0006F3 D6 0F                 1420 	sub	a, #0x0f
      0006F5 28 1C                 1421 	jr	Z, 00103$
      0006F7 FAr01r00              1422 	ld	a, (#_screenShakeTick)
      0006FA D6 14                 1423 	sub	a, #0x14
      0006FC 28 1B                 1424 	jr	Z, 00104$
      0006FE FAr01r00              1425 	ld	a, (#_screenShakeTick)
      000701 D6 19                 1426 	sub	a, #0x19
      000703 28 1B                 1427 	jr	Z, 00105$
      000705 C9                    1428 	ret
                                   1429 ;Bownly/states/bownlyMP5Microgame.c:420: case 5U:
      000706                       1430 00101$:
                                   1431 ;C:/gbdk/include/gb/gb.h:1094: SCX_REG+=x, SCY_REG+=y;
      000706 F0r00                 1432 	ldh	a, (_SCX_REG + 0)
      000708 3C                    1433 	inc	a
      000709 E0r00                 1434 	ldh	(_SCX_REG + 0), a
                                   1435 ;Bownly/states/bownlyMP5Microgame.c:422: break;
      00070B C9                    1436 	ret
                                   1437 ;Bownly/states/bownlyMP5Microgame.c:423: case 10U:
      00070C                       1438 00102$:
                                   1439 ;C:/gbdk/include/gb/gb.h:1094: SCX_REG+=x, SCY_REG+=y;
      00070C F0r00                 1440 	ldh	a, (_SCX_REG + 0)
      00070E C6 FE                 1441 	add	a, #0xfe
      000710 E0r00                 1442 	ldh	(_SCX_REG + 0), a
                                   1443 ;Bownly/states/bownlyMP5Microgame.c:425: break;
      000712 C9                    1444 	ret
                                   1445 ;Bownly/states/bownlyMP5Microgame.c:426: case 15U:
      000713                       1446 00103$:
                                   1447 ;C:/gbdk/include/gb/gb.h:1094: SCX_REG+=x, SCY_REG+=y;
      000713 F0r00                 1448 	ldh	a, (_SCY_REG + 0)
      000715 3C                    1449 	inc	a
      000716 E0r00                 1450 	ldh	(_SCY_REG + 0), a
                                   1451 ;Bownly/states/bownlyMP5Microgame.c:428: break;
      000718 C9                    1452 	ret
                                   1453 ;Bownly/states/bownlyMP5Microgame.c:429: case 20U:
      000719                       1454 00104$:
                                   1455 ;C:/gbdk/include/gb/gb.h:1094: SCX_REG+=x, SCY_REG+=y;
      000719 F0r00                 1456 	ldh	a, (_SCY_REG + 0)
      00071B C6 FE                 1457 	add	a, #0xfe
      00071D E0r00                 1458 	ldh	(_SCY_REG + 0), a
                                   1459 ;Bownly/states/bownlyMP5Microgame.c:431: break;
      00071F C9                    1460 	ret
                                   1461 ;Bownly/states/bownlyMP5Microgame.c:432: case 25U:
      000720                       1462 00105$:
                                   1463 ;C:/gbdk/include/gb/gb.h:1080: SCX_REG=x, SCY_REG=y;
      000720 AF                    1464 	xor	a, a
      000721 E0r00                 1465 	ldh	(_SCX_REG + 0), a
      000723 AF                    1466 	xor	a, a
      000724 E0r00                 1467 	ldh	(_SCY_REG + 0), a
                                   1468 ;Bownly/states/bownlyMP5Microgame.c:434: screenShakeTick = 0U;
      000726 21r01r00              1469 	ld	hl, #_screenShakeTick
      000729 36 00                 1470 	ld	(hl), #0x00
                                   1471 ;Bownly/states/bownlyMP5Microgame.c:436: }
                                   1472 ;Bownly/states/bownlyMP5Microgame.c:439: }
      00072B C9                    1473 	ret
                                   1474 ;Bownly/states/bownlyMP5Microgame.c:441: static void updateFlippingPanels()
                                   1475 ;	---------------------------------
                                   1476 ; Function updateFlippingPanels
                                   1477 ; ---------------------------------
      00072C                       1478 _updateFlippingPanels:
                                   1479 ;Bownly/states/bownlyMP5Microgame.c:443: if (flipAnimTick == flipDuration - 1U)
      00072C 21r03r00              1480 	ld	hl, #_flipDuration
      00072F 4E                    1481 	ld	c, (hl)
      000730 06 00                 1482 	ld	b, #0x00
      000732 0B                    1483 	dec	bc
      000733 21r02r00              1484 	ld	hl, #_flipAnimTick
      000736 5E                    1485 	ld	e, (hl)
      000737 16 00                 1486 	ld	d, #0x00
      000739 7B                    1487 	ld	a, e
      00073A 91                    1488 	sub	a, c
      00073B C2r0Fr08              1489 	jp	NZ,00119$
      00073E 7A                    1490 	ld	a, d
      00073F 90                    1491 	sub	a, b
      000740 C2r0Fr08              1492 	jp	NZ,00119$
                                   1493 ;Bownly/states/bownlyMP5Microgame.c:445: for (i = 0; i != 25; ++i)
      000743 21r00r00              1494 	ld	hl, #_i
      000746 36 00                 1495 	ld	(hl), #0x00
      000748                       1496 00122$:
                                   1497 ;Bownly/states/bownlyMP5Microgame.c:447: if (gridPanels[i].isFlipping == 1U)
      000748 21r00r00              1498 	ld	hl, #_i
      00074B 4E                    1499 	ld	c, (hl)
      00074C 06 00                 1500 	ld	b, #0x00
      00074E 69                    1501 	ld	l, c
      00074F 60                    1502 	ld	h, b
      000750 29                    1503 	add	hl, hl
      000751 09                    1504 	add	hl, bc
      000752 29                    1505 	add	hl, hl
      000753 01r08r00              1506 	ld	bc,#_gridPanels
      000756 09                    1507 	add	hl,bc
      000757 01 05 00              1508 	ld	bc, #0x0005
      00075A 09                    1509 	add	hl, bc
      00075B 7E                    1510 	ld	a, (hl)
                                   1511 ;Bownly/states/bownlyMP5Microgame.c:449: gridPanels[i].isFlipping = 0U;
      00075C 3D                    1512 	dec	a
      00075D 20 2C                 1513 	jr	NZ, 00123$
      00075F 77                    1514 	ld	(hl),a
                                   1515 ;Bownly/states/bownlyMP5Microgame.c:451: panelsYOrigin + (gridPanels[i].yIndex << 1U), &gridPanels[i]);
      000760 21r00r00              1516 	ld	hl, #_i
      000763 4E                    1517 	ld	c, (hl)
      000764 06 00                 1518 	ld	b, #0x00
      000766 69                    1519 	ld	l, c
      000767 60                    1520 	ld	h, b
      000768 29                    1521 	add	hl, hl
      000769 09                    1522 	add	hl, bc
      00076A 29                    1523 	add	hl, hl
      00076B 01r08r00              1524 	ld	bc,#_gridPanels
      00076E 09                    1525 	add	hl,bc
      00076F 5D                    1526 	ld	e, l
      000770 54                    1527 	ld	d, h
      000771 4D                    1528 	ld	c, l
      000772 44                    1529 	ld	b, h
                                   1530 ;Bownly/states/bownlyMP5Microgame.c:450: drawPanel(panelsXOrigin + (gridPanels[i].xIndex << 1U),
      000773 23                    1531 	inc	hl
      000774 23                    1532 	inc	hl
      000775 03                    1533 	inc	bc
      000776 03                    1534 	inc	bc
      000777 03                    1535 	inc	bc
      000778 0A                    1536 	ld	a, (bc)
      000779 87                    1537 	add	a, a
      00077A C6 04                 1538 	add	a, #0x04
      00077C 47                    1539 	ld	b, a
      00077D 7E                    1540 	ld	a, (hl)
      00077E 87                    1541 	add	a, a
      00077F C6 05                 1542 	add	a, #0x05
      000781 D5                    1543 	push	de
      000782 C5                    1544 	push	bc
      000783 33                    1545 	inc	sp
      000784 F5                    1546 	push	af
      000785 33                    1547 	inc	sp
      000786 CDrD8r05              1548 	call	_drawPanel
      000789 E8 04                 1549 	add	sp, #4
      00078B                       1550 00123$:
                                   1551 ;Bownly/states/bownlyMP5Microgame.c:445: for (i = 0; i != 25; ++i)
      00078B 21r00r00              1552 	ld	hl, #_i
      00078E 34                    1553 	inc	(hl)
      00078F 7E                    1554 	ld	a, (hl)
      000790 D6 19                 1555 	sub	a, #0x19
      000792 20 B4                 1556 	jr	NZ, 00122$
                                   1557 ;Bownly/states/bownlyMP5Microgame.c:456: if (remaining5s == 0U && mgStatus != LOST)
      000794 FAr9Er00              1558 	ld	a, (#_remaining5s)
      000797 B7                    1559 	or	a, a
      000798 C0                    1560 	ret	NZ
      000799 FAr00r00              1561 	ld	a, (#_mgStatus)
      00079C D6 03                 1562 	sub	a, #0x03
      00079E C8                    1563 	ret	Z
                                   1564 ;Bownly/states/bownlyMP5Microgame.c:458: mgStatus = WON;
      00079F 21r00r00              1565 	ld	hl, #_mgStatus
      0007A2 36 02                 1566 	ld	(hl), #0x02
                                   1567 ;Bownly/states/bownlyMP5Microgame.c:461: if (didWinFlip == FALSE)
      0007A4 FAr9Fr00              1568 	ld	a, (#_didWinFlip)
      0007A7 B7                    1569 	or	a, a
      0007A8 C0                    1570 	ret	NZ
                                   1571 ;Bownly/states/bownlyMP5Microgame.c:463: playCollisionSfx();
      0007A9 CDr00r00              1572 	call	_playCollisionSfx
                                   1573 ;Bownly/states/bownlyMP5Microgame.c:464: didWinFlip = TRUE;
      0007AC 21r9Fr00              1574 	ld	hl, #_didWinFlip
      0007AF 36 01                 1575 	ld	(hl), #0x01
                                   1576 ;Bownly/states/bownlyMP5Microgame.c:465: flipAnimTick = 1U;
      0007B1 21r02r00              1577 	ld	hl, #_flipAnimTick
      0007B4 36 01                 1578 	ld	(hl), #0x01
                                   1579 ;Bownly/states/bownlyMP5Microgame.c:466: for (i = 0U; i != 25U; ++i)
      0007B6 21r00r00              1580 	ld	hl, #_i
      0007B9 36 00                 1581 	ld	(hl), #0x00
      0007BB                       1582 00124$:
                                   1583 ;Bownly/states/bownlyMP5Microgame.c:468: gridPanels[i].panelValue = 5U;
      0007BB 21r00r00              1584 	ld	hl, #_i
      0007BE 4E                    1585 	ld	c, (hl)
      0007BF 06 00                 1586 	ld	b, #0x00
      0007C1 69                    1587 	ld	l, c
      0007C2 60                    1588 	ld	h, b
      0007C3 29                    1589 	add	hl, hl
      0007C4 09                    1590 	add	hl, bc
      0007C5 29                    1591 	add	hl, hl
      0007C6 01r08r00              1592 	ld	bc,#_gridPanels
      0007C9 09                    1593 	add	hl,bc
      0007CA 23                    1594 	inc	hl
      0007CB 36 05                 1595 	ld	(hl), #0x05
                                   1596 ;Bownly/states/bownlyMP5Microgame.c:469: gridPanels[i].isFlipping = 1U;
      0007CD 21r00r00              1597 	ld	hl, #_i
      0007D0 4E                    1598 	ld	c, (hl)
      0007D1 06 00                 1599 	ld	b, #0x00
      0007D3 69                    1600 	ld	l, c
      0007D4 60                    1601 	ld	h, b
      0007D5 29                    1602 	add	hl, hl
      0007D6 09                    1603 	add	hl, bc
      0007D7 29                    1604 	add	hl, hl
      0007D8 01r08r00              1605 	ld	bc,#_gridPanels
      0007DB 09                    1606 	add	hl,bc
      0007DC 01 05 00              1607 	ld	bc, #0x0005
      0007DF 09                    1608 	add	hl, bc
      0007E0 36 01                 1609 	ld	(hl), #0x01
                                   1610 ;Bownly/states/bownlyMP5Microgame.c:466: for (i = 0U; i != 25U; ++i)
      0007E2 21r00r00              1611 	ld	hl, #_i
      0007E5 34                    1612 	inc	(hl)
      0007E6 7E                    1613 	ld	a, (hl)
      0007E7 D6 19                 1614 	sub	a, #0x19
      0007E9 20 D0                 1615 	jr	NZ, 00124$
                                   1616 ;Bownly/states/bownlyMP5Microgame.c:471: for (i = 0U; i != 6U; ++i)
      0007EB 21r00r00              1617 	ld	hl, #_i
      0007EE 36 00                 1618 	ld	(hl), #0x00
      0007F0                       1619 00126$:
                                   1620 ;Bownly/states/bownlyMP5Microgame.c:472: set_sprite_tile(SPRID_HEARTS + i, SPRTILE_HEARTS);
      0007F0 21r00r00              1621 	ld	hl, #_i
      0007F3 5E                    1622 	ld	e, (hl)
      0007F4 1C                    1623 	inc	e
      0007F5 1C                    1624 	inc	e
      0007F6 1C                    1625 	inc	e
      0007F7 1C                    1626 	inc	e
                                   1627 ;C:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0007F8 01r00r00              1628 	ld	bc, #_shadow_OAM+0
      0007FB 6B                    1629 	ld	l, e
                                   1630 ;	spillPairReg hl
                                   1631 ;	spillPairReg hl
      0007FC 26 00                 1632 	ld	h, #0x00
                                   1633 ;	spillPairReg hl
                                   1634 ;	spillPairReg hl
      0007FE 29                    1635 	add	hl, hl
      0007FF 29                    1636 	add	hl, hl
      000800 09                    1637 	add	hl, bc
      000801 23                    1638 	inc	hl
      000802 23                    1639 	inc	hl
      000803 36 40                 1640 	ld	(hl), #0x40
                                   1641 ;Bownly/states/bownlyMP5Microgame.c:471: for (i = 0U; i != 6U; ++i)
      000805 21r00r00              1642 	ld	hl, #_i
      000808 34                    1643 	inc	(hl)
      000809 7E                    1644 	ld	a, (hl)
      00080A D6 06                 1645 	sub	a, #0x06
      00080C C8                    1646 	ret	Z
      00080D 18 E1                 1647 	jr	00126$
      00080F                       1648 00119$:
                                   1649 ;Bownly/states/bownlyMP5Microgame.c:479: for (i = 0; i != 25; ++i)
      00080F 21r00r00              1650 	ld	hl, #_i
      000812 36 00                 1651 	ld	(hl), #0x00
      000814                       1652 00128$:
                                   1653 ;Bownly/states/bownlyMP5Microgame.c:447: if (gridPanels[i].isFlipping == 1U)
      000814 21r00r00              1654 	ld	hl, #_i
      000817 4E                    1655 	ld	c, (hl)
      000818 06 00                 1656 	ld	b, #0x00
      00081A 69                    1657 	ld	l, c
      00081B 60                    1658 	ld	h, b
      00081C 29                    1659 	add	hl, hl
      00081D 09                    1660 	add	hl, bc
      00081E 29                    1661 	add	hl, hl
                                   1662 ;Bownly/states/bownlyMP5Microgame.c:481: if (gridPanels[i].isFlipping == 1U)
      00081F 01r08r00              1663 	ld	bc,#_gridPanels
      000822 09                    1664 	add	hl,bc
      000823 4D                    1665 	ld	c, l
      000824 44                    1666 	ld	b, h
      000825 21 05 00              1667 	ld	hl, #0x0005
      000828 09                    1668 	add	hl, bc
      000829 7E                    1669 	ld	a, (hl)
      00082A 3D                    1670 	dec	a
      00082B 20 4A                 1671 	jr	NZ, 00129$
                                   1672 ;Bownly/states/bownlyMP5Microgame.c:483: m = (flipAnimTick) >> 3U;
      00082D FAr02r00              1673 	ld	a, (#_flipAnimTick)
      000830 CB 37                 1674 	swap	a
      000832 07                    1675 	rlca
      000833 E6 1F                 1676 	and	a, #0x1f
      000835 EAr00r00              1677 	ld	(#_m),a
                                   1678 ;Bownly/states/bownlyMP5Microgame.c:487: panelsYOrigin + (gridPanels[i].yIndex << 1U), 2U, 2U, panelFlip1Map);
      000838 59                    1679 	ld	e, c
      000839 50                    1680 	ld	d, b
      00083A 13                    1681 	inc	de
      00083B 13                    1682 	inc	de
      00083C 13                    1683 	inc	de
                                   1684 ;Bownly/states/bownlyMP5Microgame.c:486: set_bkg_tiles(panelsXOrigin + (gridPanels[i].xIndex << 1U),
      00083D 69                    1685 	ld	l, c
                                   1686 ;	spillPairReg hl
                                   1687 ;	spillPairReg hl
      00083E 60                    1688 	ld	h, b
                                   1689 ;	spillPairReg hl
                                   1690 ;	spillPairReg hl
      00083F 23                    1691 	inc	hl
      000840 23                    1692 	inc	hl
                                   1693 ;Bownly/states/bownlyMP5Microgame.c:487: panelsYOrigin + (gridPanels[i].yIndex << 1U), 2U, 2U, panelFlip1Map);
      000841 1A                    1694 	ld	a, (de)
                                   1695 ;Bownly/states/bownlyMP5Microgame.c:486: set_bkg_tiles(panelsXOrigin + (gridPanels[i].xIndex << 1U),
      000842 4E                    1696 	ld	c, (hl)
                                   1697 ;Bownly/states/bownlyMP5Microgame.c:487: panelsYOrigin + (gridPanels[i].yIndex << 1U), 2U, 2U, panelFlip1Map);
      000843 87                    1698 	add	a, a
                                   1699 ;Bownly/states/bownlyMP5Microgame.c:486: set_bkg_tiles(panelsXOrigin + (gridPanels[i].xIndex << 1U),
      000844 CB 21                 1700 	sla	c
                                   1701 ;Bownly/states/bownlyMP5Microgame.c:487: panelsYOrigin + (gridPanels[i].yIndex << 1U), 2U, 2U, panelFlip1Map);
      000846 C6 04                 1702 	add	a, #0x04
      000848 47                    1703 	ld	b, a
                                   1704 ;Bownly/states/bownlyMP5Microgame.c:486: set_bkg_tiles(panelsXOrigin + (gridPanels[i].xIndex << 1U),
      000849 79                    1705 	ld	a, c
      00084A C6 05                 1706 	add	a, #0x05
      00084C 4F                    1707 	ld	c, a
                                   1708 ;Bownly/states/bownlyMP5Microgame.c:484: if (m == 0U || m == 2U)
      00084D 21r00r00              1709 	ld	hl, #_m
      000850 7E                    1710 	ld	a, (hl)
      000851 B7                    1711 	or	a, a
      000852 28 05                 1712 	jr	Z, 00111$
      000854 7E                    1713 	ld	a, (hl)
      000855 D6 02                 1714 	sub	a, #0x02
      000857 20 10                 1715 	jr	NZ, 00112$
      000859                       1716 00111$:
                                   1717 ;Bownly/states/bownlyMP5Microgame.c:487: panelsYOrigin + (gridPanels[i].yIndex << 1U), 2U, 2U, panelFlip1Map);
                                   1718 ;Bownly/states/bownlyMP5Microgame.c:486: set_bkg_tiles(panelsXOrigin + (gridPanels[i].xIndex << 1U),
      000859 11r00r00              1719 	ld	de, #_panelFlip1Map
      00085C D5                    1720 	push	de
      00085D 21 02 02              1721 	ld	hl, #0x202
      000860 E5                    1722 	push	hl
      000861 C5                    1723 	push	bc
      000862 CDr00r00              1724 	call	_set_bkg_tiles
      000865 E8 06                 1725 	add	sp, #6
      000867 18 0E                 1726 	jr	00129$
      000869                       1727 00112$:
                                   1728 ;Bownly/states/bownlyMP5Microgame.c:492: panelsYOrigin + (gridPanels[i].yIndex << 1U), 2U, 2U, panelFlip2Map);
                                   1729 ;Bownly/states/bownlyMP5Microgame.c:491: set_bkg_tiles(panelsXOrigin + (gridPanels[i].xIndex << 1U),
      000869 11r00r00              1730 	ld	de, #_panelFlip2Map
      00086C D5                    1731 	push	de
      00086D 21 02 02              1732 	ld	hl, #0x202
      000870 E5                    1733 	push	hl
      000871 C5                    1734 	push	bc
      000872 CDr00r00              1735 	call	_set_bkg_tiles
      000875 E8 06                 1736 	add	sp, #6
      000877                       1737 00129$:
                                   1738 ;Bownly/states/bownlyMP5Microgame.c:479: for (i = 0; i != 25; ++i)
      000877 21r00r00              1739 	ld	hl, #_i
      00087A 34                    1740 	inc	(hl)
      00087B 7E                    1741 	ld	a, (hl)
      00087C D6 19                 1742 	sub	a, #0x19
      00087E 20 94                 1743 	jr	NZ, 00128$
                                   1744 ;Bownly/states/bownlyMP5Microgame.c:497: }
      000880 C9                    1745 	ret
                                   1746 	.area _CODE_2
                                   1747 	.area _INITIALIZER
                                   1748 	.area _CABS (ABS)
